;;;; -*- mode: lisp; indent-tabs-mode: nil -*-
;;;; threefish.lisp -- implementation of the Threefish block cipher

(in-package :crypto)


;;; Constants

(defconstant +threefish-key-schedule-constant+ #x1BD11BDAA9FC1A22)


;;; Functions common to all the block sizes

(defun threefish-key-schedule (cipher key-data)
  (let* ((key-words (/ (block-length cipher) 8))
         (key (make-array (1+ key-words)
                          :element-type '(unsigned-byte 64)
                          :initial-element 0))
         (parity +threefish-key-schedule-constant+))
    (dotimes (i key-words)
      (let ((n (ub64ref/le key-data (* 8 i))))
        (setf (aref key i) n)
        (setf parity (logxor parity n))))
    (setf (aref key key-words) parity)
    (setf (threefish-key cipher) key)
    (values)))

(defun threefish-set-tweak (cipher tweak-data)
  (unless (= (length tweak-data) 16)
    (error "The tweak size must be 16 bytes."))
  (let ((tweak (threefish-tweak cipher)))
    (setf (aref tweak 0) (ub64ref/le tweak-data 0)
          (aref tweak 1) (ub64ref/le tweak-data 8)
          (aref tweak 2) (logxor (aref tweak  0) (aref tweak 1)))))


;;; Implementation for blocks of 256 bits

(defclass threefish256 (cipher 32-byte-block-mixin)
  ((key :accessor threefish-key
        :type '(simple-array (unsigned-byte 64) (5)))
   (tweak :accessor threefish-tweak
          :initform (make-array 3
                                :element-type '(unsigned-byte 64)
                                :initial-contents '(0 0 0))
          :type '(simple-array (unsigned-byte 64) (3)))))

(defmethod shared-initialize :after ((cipher threefish256) slot-names
                                     &rest initargs
                                     &key (tweak nil tweak-p)
                                     &allow-other-keys)
  (when tweak
    (threefish-set-tweak cipher tweak))
  cipher)

(defmethod schedule-key ((cipher threefish256) key)
  (threefish-key-schedule cipher key)
  cipher)

(define-block-encryptor threefish256 32
  (let* ((key (threefish-key context))
         (tweak (threefish-tweak context))
         (k0 (aref key 0))
         (k1 (aref key 1))
         (k2 (aref key 2))
         (k3 (aref key 3))
         (k4 (aref key 4))
         (t0 (aref tweak 0))
         (t1 (aref tweak 1))
         (t2 (aref tweak 2)))
    (declare (type (unsigned-byte 64) k0 k1 k2 k3 k4 t0 t1 t2))
    (with-words ((b0 b1 b2 b3) plaintext plaintext-start :big-endian nil :size 8)
      (setf b1 (mod64+ b1 (mod64+ k1 t0))
            b0 (mod64+ b0 (mod64+ b1 k0))
            b1 (logxor (rol64 b1 14) b0))
      (setf b3 (mod64+ b3 k3)
            b2 (mod64+ b2 (mod64+ b3 (mod64+ k2 t1)))
            b3 (logxor (rol64 b3 16) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 52) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 57) b2))
      (setf b0 (mod64+ b0 b1)
            b1 (logxor (rol64 b1 23) b0))
      (setf b2 (mod64+ b2 b3)
            b3 (logxor (rol64 b3 40) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 5) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 37) b2))
      (setf b1 (mod64+ b1 (mod64+ k2 t1))
            b0 (mod64+ b0 (mod64+ b1 k1))
            b1 (logxor (rol64 b1 25) b0))
      (setf b3 (mod64+ b3 (mod64+ k4 1))
            b2 (mod64+ b2 (mod64+ b3 (mod64+ k3 t2)))
            b3 (logxor (rol64 b3 33) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 46) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 12) b2))
      (setf b0 (mod64+ b0 b1)
            b1 (logxor (rol64 b1 58) b0))
      (setf b2 (mod64+ b2 b3)
            b3 (logxor (rol64 b3 22) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 32) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 32) b2))

      (setf b1 (mod64+ b1 (mod64+ k3 t2))
            b0 (mod64+ b0 (mod64+ b1 k2))
            b1 (logxor (rol64 b1 14) b0))
      (setf b3 (mod64+ b3 (mod64+ k0 2))
            b2 (mod64+ b2 (mod64+ b3 (mod64+ k4 t0)))
            b3 (logxor (rol64 b3 16) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 52) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 57) b2))
      (setf b0 (mod64+ b0 b1)
            b1 (logxor (rol64 b1 23) b0))
      (setf b2 (mod64+ b2 b3)
            b3 (logxor (rol64 b3 40) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 5) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 37) b2))
      (setf b1 (mod64+ b1 (mod64+ k4 t0))
            b0 (mod64+ b0 (mod64+ b1 k3))
            b1 (logxor (rol64 b1 25) b0))
      (setf b3 (mod64+ b3 (mod64+ k1 3))
            b2 (mod64+ b2 (mod64+ b3 (mod64+ k0 t1)))
            b3 (logxor (rol64 b3 33) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 46) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 12) b2))
      (setf b0 (mod64+ b0 b1)
            b1 (logxor (rol64 b1 58) b0))
      (setf b2 (mod64+ b2 b3)
            b3 (logxor (rol64 b3 22) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 32) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 32) b2))

      (setf b1 (mod64+ b1 (mod64+ k0 t1))
            b0 (mod64+ b0 (mod64+ b1 k4))
            b1 (logxor (rol64 b1 14) b0))
      (setf b3 (mod64+ b3 (mod64+ k2 4))
            b2 (mod64+ b2 (mod64+ b3 (mod64+ k1 t2)))
            b3 (logxor (rol64 b3 16) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 52) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 57) b2))
      (setf b0 (mod64+ b0 b1)
            b1 (logxor (rol64 b1 23) b0))
      (setf b2 (mod64+ b2 b3)
            b3 (logxor (rol64 b3 40) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 5) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 37) b2))
      (setf b1 (mod64+ b1 (mod64+ k1 t2))
            b0 (mod64+ b0 (mod64+ b1 k0))
            b1 (logxor (rol64 b1 25) b0))
      (setf b3 (mod64+ b3 (mod64+ k3 5))
            b2 (mod64+ b2 (mod64+ b3 (mod64+ k2 t0)))
            b3 (logxor (rol64 b3 33) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 46) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 12) b2))
      (setf b0 (mod64+ b0 b1)
            b1 (logxor (rol64 b1 58) b0))
      (setf b2 (mod64+ b2 b3)
            b3 (logxor (rol64 b3 22) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 32) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 32) b2))

      (setf b1 (mod64+ b1 (mod64+ k2 t0))
            b0 (mod64+ b0 (mod64+ b1 k1))
            b1 (logxor (rol64 b1 14) b0))
      (setf b3 (mod64+ b3 (mod64+ k4 6))
            b2 (mod64+ b2 (mod64+ b3 (mod64+ k3 t1)))
            b3 (logxor (rol64 b3 16) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 52) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 57) b2))
      (setf b0 (mod64+ b0 b1)
            b1 (logxor (rol64 b1 23) b0))
      (setf b2 (mod64+ b2 b3)
            b3 (logxor (rol64 b3 40) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 5) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 37) b2))
      (setf b1 (mod64+ b1 (mod64+ k3 t1))
            b0 (mod64+ b0 (mod64+ b1 k2))
            b1 (logxor (rol64 b1 25) b0))
      (setf b3 (mod64+ b3 (mod64+ k0 7))
            b2 (mod64+ b2 (mod64+ b3 (mod64+ k4 t2)))
            b3 (logxor (rol64 b3 33) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 46) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 12) b2))
      (setf b0 (mod64+ b0 b1)
            b1 (logxor (rol64 b1 58) b0))
      (setf b2 (mod64+ b2 b3)
            b3 (logxor (rol64 b3 22) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 32) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 32) b2))

      (setf b1 (mod64+ b1 (mod64+ k4 t2))
            b0 (mod64+ b0 (mod64+ b1 k3))
            b1 (logxor (rol64 b1 14) b0))
      (setf b3 (mod64+ b3 (mod64+ k1 8))
            b2 (mod64+ b2 (mod64+ b3 (mod64+ k0 t0)))
            b3 (logxor (rol64 b3 16) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 52) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 57) b2))
      (setf b0 (mod64+ b0 b1)
            b1 (logxor (rol64 b1 23) b0))
      (setf b2 (mod64+ b2 b3)
            b3 (logxor (rol64 b3 40) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 5) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 37) b2))
      (setf b1 (mod64+ b1 (mod64+ k0 t0))
            b0 (mod64+ b0 (mod64+ b1 k4))
            b1 (logxor (rol64 b1 25) b0))
      (setf b3 (mod64+ b3 (mod64+ k2 9))
            b2 (mod64+ b2 (mod64+ b3 (mod64+ k1 t1)))
            b3 (logxor (rol64 b3 33) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 46) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 12) b2))
      (setf b0 (mod64+ b0 b1)
            b1 (logxor (rol64 b1 58) b0))
      (setf b2 (mod64+ b2 b3)
            b3 (logxor (rol64 b3 22) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 32) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 32) b2))

      (setf b1 (mod64+ b1 (mod64+ k1 t1))
            b0 (mod64+ b0 (mod64+ b1 k0))
            b1 (logxor (rol64 b1 14) b0))
      (setf b3 (mod64+ b3 (mod64+ k3 10))
            b2 (mod64+ b2 (mod64+ b3 (mod64+ k2 t2)))
            b3 (logxor (rol64 b3 16) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 52) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 57) b2))
      (setf b0 (mod64+ b0 b1)
            b1 (logxor (rol64 b1 23) b0))
      (setf b2 (mod64+ b2 b3)
            b3 (logxor (rol64 b3 40) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 5) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 37) b2))
      (setf b1 (mod64+ b1 (mod64+ k2 t2))
            b0 (mod64+ b0 (mod64+ b1 k1))
            b1 (logxor (rol64 b1 25) b0))
      (setf b3 (mod64+ b3 (mod64+ k4 11))
            b2 (mod64+ b2 (mod64+ b3 (mod64+ k3 t0)))
            b3 (logxor (rol64 b3 33) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 46) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 12) b2))
      (setf b0 (mod64+ b0 b1)
            b1 (logxor (rol64 b1 58) b0))
      (setf b2 (mod64+ b2 b3)
            b3 (logxor (rol64 b3 22) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 32) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 32) b2))

      (setf b1 (mod64+ b1 (mod64+ k3 t0))
            b0 (mod64+ b0 (mod64+ b1 k2))
            b1 (logxor (rol64 b1 14) b0))
      (setf b3 (mod64+ b3 (mod64+ k0 12))
            b2 (mod64+ b2 (mod64+ b3 (mod64+ k4 t1)))
            b3 (logxor (rol64 b3 16) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 52) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 57) b2))
      (setf b0 (mod64+ b0 b1)
            b1 (logxor (rol64 b1 23) b0))
      (setf b2 (mod64+ b2 b3)
            b3 (logxor (rol64 b3 40) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 5) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 37) b2))
      (setf b1 (mod64+ b1 (mod64+ k4 t1))
            b0 (mod64+ b0 (mod64+ b1 k3))
            b1 (logxor (rol64 b1 25) b0))
      (setf b3 (mod64+ b3 (mod64+ k1 13))
            b2 (mod64+ b2 (mod64+ b3 (mod64+ k0 t2)))
            b3 (logxor (rol64 b3 33) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 46) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 12) b2))
      (setf b0 (mod64+ b0 b1)
            b1 (logxor (rol64 b1 58) b0))
      (setf b2 (mod64+ b2 b3)
            b3 (logxor (rol64 b3 22) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 32) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 32) b2))

      (setf b1 (mod64+ b1 (mod64+ k0 t2))
            b0 (mod64+ b0 (mod64+ b1 k4))
            b1 (logxor (rol64 b1 14) b0))
      (setf b3 (mod64+ b3 (mod64+ k2 14))
            b2 (mod64+ b2 (mod64+ b3 (mod64+ k1 t0)))
            b3 (logxor (rol64 b3 16) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 52) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 57) b2))
      (setf b0 (mod64+ b0 b1)
            b1 (logxor (rol64 b1 23) b0))
      (setf b2 (mod64+ b2 b3)
            b3 (logxor (rol64 b3 40) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 5) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 37) b2))
      (setf b1 (mod64+ b1 (mod64+ k1 t0))
            b0 (mod64+ b0 (mod64+ b1 k0))
            b1 (logxor (rol64 b1 25) b0))
      (setf b3 (mod64+ b3 (mod64+ k3 15))
            b2 (mod64+ b2 (mod64+ b3 (mod64+ k2 t1)))
            b3 (logxor (rol64 b3 33) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 46) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 12) b2))
      (setf b0 (mod64+ b0 b1)
            b1 (logxor (rol64 b1 58) b0))
      (setf b2 (mod64+ b2 b3)
            b3 (logxor (rol64 b3 22) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 32) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 32) b2))

      (setf b1 (mod64+ b1 (mod64+ k2 t1))
            b0 (mod64+ b0 (mod64+ b1 k1))
            b1 (logxor (rol64 b1 14) b0))
      (setf b3 (mod64+ b3 (mod64+ k4 16))
            b2 (mod64+ b2 (mod64+ b3 (mod64+ k3 t2)))
            b3 (logxor (rol64 b3 16) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 52) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 57) b2))
      (setf b0 (mod64+ b0 b1)
            b1 (logxor (rol64 b1 23) b0))
      (setf b2 (mod64+ b2 b3)
            b3 (logxor (rol64 b3 40) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 5) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 37) b2))
      (setf b1 (mod64+ b1 (mod64+ k3 t2))
            b0 (mod64+ b0 (mod64+ b1 k2))
            b1 (logxor (rol64 b1 25) b0))
      (setf b3 (mod64+ b3 (mod64+ k0 17))
            b2 (mod64+ b2 (mod64+ b3 (mod64+ k4 t0)))
            b3 (logxor (rol64 b3 33) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 46) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 12) b2))
      (setf b0 (mod64+ b0 b1)
            b1 (logxor (rol64 b1 58) b0))
      (setf b2 (mod64+ b2 b3)
            b3 (logxor (rol64 b3 22) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 32) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 32) b2))

      (setf b0 (mod64+ b0 k3)
            b1 (mod64+ b1 (mod64+ k4 t0))
            b2 (mod64+ b2 (mod64+ k0 t1))
            b3 (mod64+ b3 (mod64+ k1 18)))
      (store-words ciphertext ciphertext-start b0 b1 b2 b3)
      (values))))

(define-block-decryptor threefish256 32
  (let* ((key (threefish-key context))
         (tweak (threefish-tweak context))
         (k0 (aref key 0))
         (k1 (aref key 1))
         (k2 (aref key 2))
         (k3 (aref key 3))
         (k4 (aref key 4))
         (t0 (aref tweak 0))
         (t1 (aref tweak 1))
         (t2 (aref tweak 2)))
    (declare (type (unsigned-byte 64) k0 k1 k2 k3 k4 t0 t1 t2))
    (with-words ((b0 b1 b2 b3) ciphertext ciphertext-start :big-endian nil :size 8)
      (setf b0 (mod64- b0 k3)
            b1 (mod64- b1 (mod64+ k4 t0))
            b2 (mod64- b2 (mod64+ k0 t1))
            b3 (mod64- b3 (mod64+ k1 18)))

      (setf b3 (ror64 (logxor b3 b0) 32)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 32)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 58)
            b0 (mod64- b0 b1))
      (setf b3 (ror64 (logxor b3 b2) 22)
            b2 (mod64- b2 b3))
      (setf b3 (ror64 (logxor b3 b0) 46)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 12)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 25)
            b0 (mod64- b0 (mod64+ b1 k2))
            b1 (mod64- b1 (mod64+ k3 t2)))
      (setf b3 (ror64 (logxor b3 b2) 33)
            b2 (mod64- b2 (mod64+ b3 (mod64+ k4 t0)))
            b3 (mod64- b3 (mod64+ k0 17)))
      (setf b3 (ror64 (logxor b3 b0) 5)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 37)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 23)
            b0 (mod64- b0 b1))
      (setf b3 (ror64 (logxor b3 b2) 40)
            b2 (mod64- b2 b3))
      (setf b3 (ror64 (logxor b3 b0) 52)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 57)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 14)
            b0 (mod64- b0 (mod64+ b1 k1))
            b1 (mod64- b1 (mod64+ k2 t1)))
      (setf b3 (ror64 (logxor b3 b2) 16)
            b2 (mod64- b2 (mod64+ b3 (mod64+ k3 t2)))
            b3 (mod64- b3 (mod64+ k4 16)))

      (setf b3 (ror64 (logxor b3 b0) 32)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 32)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 58)
            b0 (mod64- b0 b1))
      (setf b3 (ror64 (logxor b3 b2) 22)
            b2 (mod64- b2 b3))
      (setf b3 (ror64 (logxor b3 b0) 46)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 12)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 25)
            b0 (mod64- b0 (mod64+ b1 k0))
            b1 (mod64- b1 (mod64+ k1 t0)))
      (setf b3 (ror64 (logxor b3 b2) 33)
            b2 (mod64- b2 (mod64+ b3 (mod64+ k2 t1)))
            b3 (mod64- b3 (mod64+ k3 15)))
      (setf b3 (ror64 (logxor b3 b0) 5)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 37)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 23)
            b0 (mod64- b0 b1))
      (setf b3 (ror64 (logxor b3 b2) 40)
            b2 (mod64- b2 b3))
      (setf b3 (ror64 (logxor b3 b0) 52)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 57)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 14)
            b0 (mod64- b0 (mod64+ b1 k4))
            b1 (mod64- b1 (mod64+ k0 t2)))
      (setf b3 (ror64 (logxor b3 b2) 16)
            b2 (mod64- b2 (mod64+ b3 (mod64+ k1 t0)))
            b3 (mod64- b3 (mod64+ k2 14)))

      (setf b3 (ror64 (logxor b3 b0) 32)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 32)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 58)
            b0 (mod64- b0 b1))
      (setf b3 (ror64 (logxor b3 b2) 22)
            b2 (mod64- b2 b3))
      (setf b3 (ror64 (logxor b3 b0) 46)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 12)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 25)
            b0 (mod64- b0 (mod64+ b1 k3))
            b1 (mod64- b1 (mod64+ k4 t1)))
      (setf b3 (ror64 (logxor b3 b2) 33)
            b2 (mod64- b2 (mod64+ b3 (mod64+ k0 t2)))
            b3 (mod64- b3 (mod64+ k1 13)))
      (setf b3 (ror64 (logxor b3 b0) 5)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 37)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 23)
            b0 (mod64- b0 b1))
      (setf b3 (ror64 (logxor b3 b2) 40)
            b2 (mod64- b2 b3))
      (setf b3 (ror64 (logxor b3 b0) 52)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 57)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 14)
            b0 (mod64- b0 (mod64+ b1 k2))
            b1 (mod64- b1 (mod64+ k3 t0)))
      (setf b3 (ror64 (logxor b3 b2) 16)
            b2 (mod64- b2 (mod64+ b3 (mod64+ k4 t1)))
            b3 (mod64- b3 (mod64+ k0 12)))

      (setf b3 (ror64 (logxor b3 b0) 32)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 32)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 58)
            b0 (mod64- b0 b1))
      (setf b3 (ror64 (logxor b3 b2) 22)
            b2 (mod64- b2 b3))
      (setf b3 (ror64 (logxor b3 b0) 46)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 12)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 25)
            b0 (mod64- b0 (mod64+ b1 k1))
            b1 (mod64- b1 (mod64+ k2 t2)))
      (setf b3 (ror64 (logxor b3 b2) 33)
            b2 (mod64- b2 (mod64+ b3 (mod64+ k3 t0)))
            b3 (mod64- b3 (mod64+ k4 11)))
      (setf b3 (ror64 (logxor b3 b0) 5)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 37)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 23)
            b0 (mod64- b0 b1))
      (setf b3 (ror64 (logxor b3 b2) 40)
            b2 (mod64- b2 b3))
      (setf b3 (ror64 (logxor b3 b0) 52)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 57)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 14)
            b0 (mod64- b0 (mod64+ b1 k0))
            b1 (mod64- b1 (mod64+ k1 t1)))
      (setf b3 (ror64 (logxor b3 b2) 16)
            b2 (mod64- b2 (mod64+ b3 (mod64+ k2 t2)))
            b3 (mod64- b3 (mod64+ k3 10)))

      (setf b3 (ror64 (logxor b3 b0) 32)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 32)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 58)
            b0 (mod64- b0 b1))
      (setf b3 (ror64 (logxor b3 b2) 22)
            b2 (mod64- b2 b3))
      (setf b3 (ror64 (logxor b3 b0) 46)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 12)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 25)
            b0 (mod64- b0 (mod64+ b1 k4))
            b1 (mod64- b1 (mod64+ k0 t0)))
      (setf b3 (ror64 (logxor b3 b2) 33)
            b2 (mod64- b2 (mod64+ b3 (mod64+ k1 t1)))
            b3 (mod64- b3 (mod64+ k2 9)))
      (setf b3 (ror64 (logxor b3 b0) 5)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 37)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 23)
            b0 (mod64- b0 b1))
      (setf b3 (ror64 (logxor b3 b2) 40)
            b2 (mod64- b2 b3))
      (setf b3 (ror64 (logxor b3 b0) 52)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 57)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 14)
            b0 (mod64- b0 (mod64+ b1 k3))
            b1 (mod64- b1 (mod64+ k4 t2)))
      (setf b3 (ror64 (logxor b3 b2) 16)
            b2 (mod64- b2 (mod64+ b3 (mod64+ k0 t0)))
            b3 (mod64- b3 (mod64+ k1 8)))

      (setf b3 (ror64 (logxor b3 b0) 32)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 32)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 58)
            b0 (mod64- b0 b1))
      (setf b3 (ror64 (logxor b3 b2) 22)
            b2 (mod64- b2 b3))
      (setf b3 (ror64 (logxor b3 b0) 46)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 12)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 25)
            b0 (mod64- b0 (mod64+ b1 k2))
            b1 (mod64- b1 (mod64+ k3 t1)))
      (setf b3 (ror64 (logxor b3 b2) 33)
            b2 (mod64- b2 (mod64+ b3 (mod64+ k4 t2)))
            b3 (mod64- b3 (mod64+ k0 7)))
      (setf b3 (ror64 (logxor b3 b0) 5)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 37)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 23)
            b0 (mod64- b0 b1))
      (setf b3 (ror64 (logxor b3 b2) 40)
            b2 (mod64- b2 b3))
      (setf b3 (ror64 (logxor b3 b0) 52)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 57)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 14)
            b0 (mod64- b0 (mod64+ b1 k1))
            b1 (mod64- b1 (mod64+ k2 t0)))
      (setf b3 (ror64 (logxor b3 b2) 16)
            b2 (mod64- b2 (mod64+ b3 (mod64+ k3 t1)))
            b3 (mod64- b3 (mod64+ k4 6)))

      (setf b3 (ror64 (logxor b3 b0) 32)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 32)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 58)
            b0 (mod64- b0 b1))
      (setf b3 (ror64 (logxor b3 b2) 22)
            b2 (mod64- b2 b3))
      (setf b3 (ror64 (logxor b3 b0) 46)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 12)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 25)
            b0 (mod64- b0 (mod64+ b1 k0))
            b1 (mod64- b1 (mod64+ k1 t2)))
      (setf b3 (ror64 (logxor b3 b2) 33)
            b2 (mod64- b2 (mod64+ b3 (mod64+ k2 t0)))
            b3 (mod64- b3 (mod64+ k3 5)))
      (setf b3 (ror64 (logxor b3 b0) 5)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 37)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 23)
            b0 (mod64- b0 b1))
      (setf b3 (ror64 (logxor b3 b2) 40)
            b2 (mod64- b2 b3))
      (setf b3 (ror64 (logxor b3 b0) 52)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 57)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 14)
            b0 (mod64- b0 (mod64+ b1 k4))
            b1 (mod64- b1 (mod64+ k0 t1)))
      (setf b3 (ror64 (logxor b3 b2) 16)
            b2 (mod64- b2 (mod64+ b3 (mod64+ k1 t2)))
            b3 (mod64- b3 (mod64+ k2 4)))

      (setf b3 (ror64 (logxor b3 b0) 32)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 32)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 58)
            b0 (mod64- b0 b1))
      (setf b3 (ror64 (logxor b3 b2) 22)
            b2 (mod64- b2 b3))
      (setf b3 (ror64 (logxor b3 b0) 46)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 12)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 25)
            b0 (mod64- b0 (mod64+ b1 k3))
            b1 (mod64- b1 (mod64+ k4 t0)))
      (setf b3 (ror64 (logxor b3 b2) 33)
            b2 (mod64- b2 (mod64+ b3 (mod64+ k0 t1)))
            b3 (mod64- b3 (mod64+ k1 3)))
      (setf b3 (ror64 (logxor b3 b0) 5)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 37)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 23)
            b0 (mod64- b0 b1))
      (setf b3 (ror64 (logxor b3 b2) 40)
            b2 (mod64- b2 b3))
      (setf b3 (ror64 (logxor b3 b0) 52)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 57)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 14)
            b0 (mod64- b0 (mod64+ b1 k2))
            b1 (mod64- b1 (mod64+ k3 t2)))
      (setf b3 (ror64 (logxor b3 b2) 16)
            b2 (mod64- b2 (mod64+ b3 (mod64+ k4 t0)))
            b3 (mod64- b3 (mod64+ k0 2)))

      (setf b3 (ror64 (logxor b3 b0) 32)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 32)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 58)
            b0 (mod64- b0 b1))
      (setf b3 (ror64 (logxor b3 b2) 22)
            b2 (mod64- b2 b3))
      (setf b3 (ror64 (logxor b3 b0) 46)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 12)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 25)
            b0 (mod64- b0 (mod64+ b1 k1))
            b1 (mod64- b1 (mod64+ k2 t1)))
      (setf b3 (ror64 (logxor b3 b2) 33)
            b2 (mod64- b2 (mod64+ b3 (mod64+ k3 t2)))
            b3 (mod64- b3 (mod64+ k4 1)))
      (setf b3 (ror64 (logxor b3 b0) 5)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 37)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 23)
            b0 (mod64- b0 b1))
      (setf b3 (ror64 (logxor b3 b2) 40)
            b2 (mod64- b2 b3))
      (setf b3 (ror64 (logxor b3 b0) 52)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 57)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 14)
            b0 (mod64- b0 (mod64+ b1 k0))
            b1 (mod64- b1 (mod64+ k1 t0)))
      (setf b3 (ror64 (logxor b3 b2) 16)
            b2 (mod64- b2 (mod64+ b3 (mod64+ k2 t1)))
            b3 (mod64- b3 k3))

      (store-words plaintext plaintext-start b0 b1 b2 b3)
      (values))))

(defcipher threefish256
  (:encrypt-function threefish256-encrypt-block)
  (:decrypt-function threefish256-decrypt-block)
  (:block-length 32)
  (:key-length (:fixed 32)))


;;; Implementation for blocks of 512 bits

(defclass threefish512 (cipher 64-byte-block-mixin)
  ((key :accessor threefish-key
        :type '(simple-array (unsigned-byte 64) (9)))
   (tweak :accessor threefish-tweak
          :initform (make-array 3
                                :element-type '(unsigned-byte 64)
                                :initial-contents '(0 0 0))
          :type '(simple-array (unsigned-byte 64) (3)))))

(defmethod shared-initialize :after ((cipher threefish512) slot-names
                                     &rest initargs
                                     &key (tweak nil tweak-p)
                                     &allow-other-keys)
  (when tweak
    (threefish-set-tweak cipher tweak))
  cipher)

(defmethod schedule-key ((cipher threefish512) key)
  (threefish-key-schedule cipher key)
  cipher)

(define-block-encryptor threefish512 64
  (let* ((key (threefish-key context))
         (tweak (threefish-tweak context))
         (k0 (aref key 0))
         (k1 (aref key 1))
         (k2 (aref key 2))
         (k3 (aref key 3))
         (k4 (aref key 4))
         (k5 (aref key 5))
         (k6 (aref key 6))
         (k7 (aref key 7))
         (k8 (aref key 8))
         (t0 (aref tweak 0))
         (t1 (aref tweak 1))
         (t2 (aref tweak 2)))
    (declare (type (unsigned-byte 64) k0 k1 k2 k3 k4 k5 k6 k7 k8 t0 t1 t2))
    (with-words ((b0 b1 b2 b3 b4 b5 b6 b7) plaintext plaintext-start :big-endian nil :size 8)
      (setf b1 (mod64+ b1 k1)
            b0 (mod64+ b0 (mod64+ b1 k0))
            b1 (logxor (rol64 b1 46) b0))
      (setf b3 (mod64+ b3 k3)
            b2 (mod64+ b2 (mod64+ b3 k2))
            b3 (logxor (rol64 b3 36) b2))
      (setf b5 (mod64+ b5 (mod64+ k5 t0))
            b4 (mod64+ b4 (mod64+ b5 k4))
            b5 (logxor (rol64 b5 19) b4))
      (setf b7 (mod64+ b7 k7)
            b6 (mod64+ b6 (mod64+ b7 (mod64+ k6 t1)))
            b7 (logxor (rol64 b7 37) b6))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 33) b2))
      (setf b4 (mod64+ b4 b7)
            b7 (logxor (rol64 b7 27) b4))
      (setf b6 (mod64+ b6 b5)
            b5 (logxor (rol64 b5 14) b6))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 42) b0))
      (setf b4 (mod64+ b4 b1)
            b1 (logxor (rol64 b1 17) b4))
      (setf b6 (mod64+ b6 b3)
            b3 (logxor (rol64 b3 49) b6))
      (setf b0 (mod64+ b0 b5)
            b5 (logxor (rol64 b5 36) b0))
      (setf b2 (mod64+ b2 b7)
            b7 (logxor (rol64 b7 39) b2))
      (setf b6 (mod64+ b6 b1)
            b1 (logxor (rol64 b1 44) b6))
      (setf b0 (mod64+ b0 b7)
            b7 (logxor (rol64 b7 9) b0))
      (setf b2 (mod64+ b2 b5)
            b5 (logxor (rol64 b5 54) b2))
      (setf b4 (mod64+ b4 b3)
            b3 (logxor (rol64 b3 56) b4))
      (setf b1 (mod64+ b1 k2)
            b0 (mod64+ b0 (mod64+ b1 k1))
            b1 (logxor (rol64 b1 39) b0))
      (setf b3 (mod64+ b3 k4)
            b2 (mod64+ b2 (mod64+ b3 k3))
            b3 (logxor (rol64 b3 30) b2))
      (setf b5 (mod64+ b5 (mod64+ k6 t1))
            b4 (mod64+ b4 (mod64+ b5 k5))
            b5 (logxor (rol64 b5 34) b4))
      (setf b7 (mod64+ b7 (mod64+ k8 1))
            b6 (mod64+ b6 (mod64+ b7 (mod64+ k7 t2)))
            b7 (logxor (rol64 b7 24) b6))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 13) b2))
      (setf b4 (mod64+ b4 b7)
            b7 (logxor (rol64 b7 50) b4))
      (setf b6 (mod64+ b6 b5)
            b5 (logxor (rol64 b5 10) b6))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 17) b0))
      (setf b4 (mod64+ b4 b1)
            b1 (logxor (rol64 b1 25) b4))
      (setf b6 (mod64+ b6 b3)
            b3 (logxor (rol64 b3 29) b6))
      (setf b0 (mod64+ b0 b5)
            b5 (logxor (rol64 b5 39) b0))
      (setf b2 (mod64+ b2 b7)
            b7 (logxor (rol64 b7 43) b2))
      (setf b6 (mod64+ b6 b1)
            b1 (logxor (rol64 b1 8) b6))
      (setf b0 (mod64+ b0 b7)
            b7 (logxor (rol64 b7 35) b0))
      (setf b2 (mod64+ b2 b5)
            b5 (logxor (rol64 b5 56) b2))
      (setf b4 (mod64+ b4 b3)
            b3 (logxor (rol64 b3 22) b4))

      (setf b1 (mod64+ b1 k3)
            b0 (mod64+ b0 (mod64+ b1 k2))
            b1 (logxor (rol64 b1 46) b0))
      (setf b3 (mod64+ b3 k5)
            b2 (mod64+ b2 (mod64+ b3 k4))
            b3 (logxor (rol64 b3 36) b2))
      (setf b5 (mod64+ b5 (mod64+ k7 t2))
            b4 (mod64+ b4 (mod64+ b5 k6))
            b5 (logxor (rol64 b5 19) b4))
      (setf b7 (mod64+ b7 (mod64+ k0 2))
            b6 (mod64+ b6 (mod64+ b7 (mod64+ k8 t0)))
            b7 (logxor (rol64 b7 37) b6))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 33) b2))
      (setf b4 (mod64+ b4 b7)
            b7 (logxor (rol64 b7 27) b4))
      (setf b6 (mod64+ b6 b5)
            b5 (logxor (rol64 b5 14) b6))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 42) b0))
      (setf b4 (mod64+ b4 b1)
            b1 (logxor (rol64 b1 17) b4))
      (setf b6 (mod64+ b6 b3)
            b3 (logxor (rol64 b3 49) b6))
      (setf b0 (mod64+ b0 b5)
            b5 (logxor (rol64 b5 36) b0))
      (setf b2 (mod64+ b2 b7)
            b7 (logxor (rol64 b7 39) b2))
      (setf b6 (mod64+ b6 b1)
            b1 (logxor (rol64 b1 44) b6))
      (setf b0 (mod64+ b0 b7)
            b7 (logxor (rol64 b7 9) b0))
      (setf b2 (mod64+ b2 b5)
            b5 (logxor (rol64 b5 54) b2))
      (setf b4 (mod64+ b4 b3)
            b3 (logxor (rol64 b3 56) b4))
      (setf b1 (mod64+ b1 k4)
            b0 (mod64+ b0 (mod64+ b1 k3))
            b1 (logxor (rol64 b1 39) b0))
      (setf b3 (mod64+ b3 k6)
            b2 (mod64+ b2 (mod64+ b3 k5))
            b3 (logxor (rol64 b3 30) b2))
      (setf b5 (mod64+ b5 (mod64+ k8 t0))
            b4 (mod64+ b4 (mod64+ b5 k7))
            b5 (logxor (rol64 b5 34) b4))
      (setf b7 (mod64+ b7 (mod64+ k1 3))
            b6 (mod64+ b6 (mod64+ b7 (mod64+ k0 t1)))
            b7 (logxor (rol64 b7 24) b6))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 13) b2))
      (setf b4 (mod64+ b4 b7)
            b7 (logxor (rol64 b7 50) b4))
      (setf b6 (mod64+ b6 b5)
            b5 (logxor (rol64 b5 10) b6))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 17) b0))
      (setf b4 (mod64+ b4 b1)
            b1 (logxor (rol64 b1 25) b4))
      (setf b6 (mod64+ b6 b3)
            b3 (logxor (rol64 b3 29) b6))
      (setf b0 (mod64+ b0 b5)
            b5 (logxor (rol64 b5 39) b0))
      (setf b2 (mod64+ b2 b7)
            b7 (logxor (rol64 b7 43) b2))
      (setf b6 (mod64+ b6 b1)
            b1 (logxor (rol64 b1 8) b6))
      (setf b0 (mod64+ b0 b7)
            b7 (logxor (rol64 b7 35) b0))
      (setf b2 (mod64+ b2 b5)
            b5 (logxor (rol64 b5 56) b2))
      (setf b4 (mod64+ b4 b3)
            b3 (logxor (rol64 b3 22) b4))

      (setf b1 (mod64+ b1 k5)
            b0 (mod64+ b0 (mod64+ b1 k4))
            b1 (logxor (rol64 b1 46) b0))
      (setf b3 (mod64+ b3 k7)
            b2 (mod64+ b2 (mod64+ b3 k6))
            b3 (logxor (rol64 b3 36) b2))
      (setf b5 (mod64+ b5 (mod64+ k0 t1))
            b4 (mod64+ b4 (mod64+ b5 k8))
            b5 (logxor (rol64 b5 19) b4))
      (setf b7 (mod64+ b7 (mod64+ k2 4))
            b6 (mod64+ b6 (mod64+ b7 (mod64+ k1 t2)))
            b7 (logxor (rol64 b7 37) b6))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 33) b2))
      (setf b4 (mod64+ b4 b7)
            b7 (logxor (rol64 b7 27) b4))
      (setf b6 (mod64+ b6 b5)
            b5 (logxor (rol64 b5 14) b6))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 42) b0))
      (setf b4 (mod64+ b4 b1)
            b1 (logxor (rol64 b1 17) b4))
      (setf b6 (mod64+ b6 b3)
            b3 (logxor (rol64 b3 49) b6))
      (setf b0 (mod64+ b0 b5)
            b5 (logxor (rol64 b5 36) b0))
      (setf b2 (mod64+ b2 b7)
            b7 (logxor (rol64 b7 39) b2))
      (setf b6 (mod64+ b6 b1)
            b1 (logxor (rol64 b1 44) b6))
      (setf b0 (mod64+ b0 b7)
            b7 (logxor (rol64 b7 9) b0))
      (setf b2 (mod64+ b2 b5)
            b5 (logxor (rol64 b5 54) b2))
      (setf b4 (mod64+ b4 b3)
            b3 (logxor (rol64 b3 56) b4))
      (setf b1 (mod64+ b1 k6)
            b0 (mod64+ b0 (mod64+ b1 k5))
            b1 (logxor (rol64 b1 39) b0))
      (setf b3 (mod64+ b3 k8)
            b2 (mod64+ b2 (mod64+ b3 k7))
            b3 (logxor (rol64 b3 30) b2))
      (setf b5 (mod64+ b5 (mod64+ k1 t2))
            b4 (mod64+ b4 (mod64+ b5 k0))
            b5 (logxor (rol64 b5 34) b4))
      (setf b7 (mod64+ b7 (mod64+ k3 5))
            b6 (mod64+ b6 (mod64+ b7 (mod64+ k2 t0)))
            b7 (logxor (rol64 b7 24) b6))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 13) b2))
      (setf b4 (mod64+ b4 b7)
            b7 (logxor (rol64 b7 50) b4))
      (setf b6 (mod64+ b6 b5)
            b5 (logxor (rol64 b5 10) b6))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 17) b0))
      (setf b4 (mod64+ b4 b1)
            b1 (logxor (rol64 b1 25) b4))
      (setf b6 (mod64+ b6 b3)
            b3 (logxor (rol64 b3 29) b6))
      (setf b0 (mod64+ b0 b5)
            b5 (logxor (rol64 b5 39) b0))
      (setf b2 (mod64+ b2 b7)
            b7 (logxor (rol64 b7 43) b2))
      (setf b6 (mod64+ b6 b1)
            b1 (logxor (rol64 b1 8) b6))
      (setf b0 (mod64+ b0 b7)
            b7 (logxor (rol64 b7 35) b0))
      (setf b2 (mod64+ b2 b5)
            b5 (logxor (rol64 b5 56) b2))
      (setf b4 (mod64+ b4 b3)
            b3 (logxor (rol64 b3 22) b4))

      (setf b1 (mod64+ b1 k7)
            b0 (mod64+ b0 (mod64+ b1 k6))
            b1 (logxor (rol64 b1 46) b0))
      (setf b3 (mod64+ b3 k0)
            b2 (mod64+ b2 (mod64+ b3 k8))
            b3 (logxor (rol64 b3 36) b2))
      (setf b5 (mod64+ b5 (mod64+ k2 t0))
            b4 (mod64+ b4 (mod64+ b5 k1))
            b5 (logxor (rol64 b5 19) b4))
      (setf b7 (mod64+ b7 (mod64+ k4 6))
            b6 (mod64+ b6 (mod64+ b7 (mod64+ k3 t1)))
            b7 (logxor (rol64 b7 37) b6))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 33) b2))
      (setf b4 (mod64+ b4 b7)
            b7 (logxor (rol64 b7 27) b4))
      (setf b6 (mod64+ b6 b5)
            b5 (logxor (rol64 b5 14) b6))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 42) b0))
      (setf b4 (mod64+ b4 b1)
            b1 (logxor (rol64 b1 17) b4))
      (setf b6 (mod64+ b6 b3)
            b3 (logxor (rol64 b3 49) b6))
      (setf b0 (mod64+ b0 b5)
            b5 (logxor (rol64 b5 36) b0))
      (setf b2 (mod64+ b2 b7)
            b7 (logxor (rol64 b7 39) b2))
      (setf b6 (mod64+ b6 b1)
            b1 (logxor (rol64 b1 44) b6))
      (setf b0 (mod64+ b0 b7)
            b7 (logxor (rol64 b7 9) b0))
      (setf b2 (mod64+ b2 b5)
            b5 (logxor (rol64 b5 54) b2))
      (setf b4 (mod64+ b4 b3)
            b3 (logxor (rol64 b3 56) b4))
      (setf b1 (mod64+ b1 k8)
            b0 (mod64+ b0 (mod64+ b1 k7))
            b1 (logxor (rol64 b1 39) b0))
      (setf b3 (mod64+ b3 k1)
            b2 (mod64+ b2 (mod64+ b3 k0))
            b3 (logxor (rol64 b3 30) b2))
      (setf b5 (mod64+ b5 (mod64+ k3 t1))
            b4 (mod64+ b4 (mod64+ b5 k2))
            b5 (logxor (rol64 b5 34) b4))
      (setf b7 (mod64+ b7 (mod64+ k5 7))
            b6 (mod64+ b6 (mod64+ b7 (mod64+ k4 t2)))
            b7 (logxor (rol64 b7 24) b6))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 13) b2))
      (setf b4 (mod64+ b4 b7)
            b7 (logxor (rol64 b7 50) b4))
      (setf b6 (mod64+ b6 b5)
            b5 (logxor (rol64 b5 10) b6))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 17) b0))
      (setf b4 (mod64+ b4 b1)
            b1 (logxor (rol64 b1 25) b4))
      (setf b6 (mod64+ b6 b3)
            b3 (logxor (rol64 b3 29) b6))
      (setf b0 (mod64+ b0 b5)
            b5 (logxor (rol64 b5 39) b0))
      (setf b2 (mod64+ b2 b7)
            b7 (logxor (rol64 b7 43) b2))
      (setf b6 (mod64+ b6 b1)
            b1 (logxor (rol64 b1 8) b6))
      (setf b0 (mod64+ b0 b7)
            b7 (logxor (rol64 b7 35) b0))
      (setf b2 (mod64+ b2 b5)
            b5 (logxor (rol64 b5 56) b2))
      (setf b4 (mod64+ b4 b3)
            b3 (logxor (rol64 b3 22) b4))

      (setf b1 (mod64+ b1 k0)
            b0 (mod64+ b0 (mod64+ b1 k8))
            b1 (logxor (rol64 b1 46) b0))
      (setf b3 (mod64+ b3 k2)
            b2 (mod64+ b2 (mod64+ b3 k1))
            b3 (logxor (rol64 b3 36) b2))
      (setf b5 (mod64+ b5 (mod64+ k4 t2))
            b4 (mod64+ b4 (mod64+ b5 k3))
            b5 (logxor (rol64 b5 19) b4))
      (setf b7 (mod64+ b7 (mod64+ k6 8))
            b6 (mod64+ b6 (mod64+ b7 (mod64+ k5 t0)))
            b7 (logxor (rol64 b7 37) b6))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 33) b2))
      (setf b4 (mod64+ b4 b7)
            b7 (logxor (rol64 b7 27) b4))
      (setf b6 (mod64+ b6 b5)
            b5 (logxor (rol64 b5 14) b6))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 42) b0))
      (setf b4 (mod64+ b4 b1)
            b1 (logxor (rol64 b1 17) b4))
      (setf b6 (mod64+ b6 b3)
            b3 (logxor (rol64 b3 49) b6))
      (setf b0 (mod64+ b0 b5)
            b5 (logxor (rol64 b5 36) b0))
      (setf b2 (mod64+ b2 b7)
            b7 (logxor (rol64 b7 39) b2))
      (setf b6 (mod64+ b6 b1)
            b1 (logxor (rol64 b1 44) b6))
      (setf b0 (mod64+ b0 b7)
            b7 (logxor (rol64 b7 9) b0))
      (setf b2 (mod64+ b2 b5)
            b5 (logxor (rol64 b5 54) b2))
      (setf b4 (mod64+ b4 b3)
            b3 (logxor (rol64 b3 56) b4))
      (setf b1 (mod64+ b1 k1)
            b0 (mod64+ b0 (mod64+ b1 k0))
            b1 (logxor (rol64 b1 39) b0))
      (setf b3 (mod64+ b3 k3)
            b2 (mod64+ b2 (mod64+ b3 k2))
            b3 (logxor (rol64 b3 30) b2))
      (setf b5 (mod64+ b5 (mod64+ k5 t0))
            b4 (mod64+ b4 (mod64+ b5 k4))
            b5 (logxor (rol64 b5 34) b4))
      (setf b7 (mod64+ b7 (mod64+ k7 9))
            b6 (mod64+ b6 (mod64+ b7 (mod64+ k6 t1)))
            b7 (logxor (rol64 b7 24) b6))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 13) b2))
      (setf b4 (mod64+ b4 b7)
            b7 (logxor (rol64 b7 50) b4))
      (setf b6 (mod64+ b6 b5)
            b5 (logxor (rol64 b5 10) b6))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 17) b0))
      (setf b4 (mod64+ b4 b1)
            b1 (logxor (rol64 b1 25) b4))
      (setf b6 (mod64+ b6 b3)
            b3 (logxor (rol64 b3 29) b6))
      (setf b0 (mod64+ b0 b5)
            b5 (logxor (rol64 b5 39) b0))
      (setf b2 (mod64+ b2 b7)
            b7 (logxor (rol64 b7 43) b2))
      (setf b6 (mod64+ b6 b1)
            b1 (logxor (rol64 b1 8) b6))
      (setf b0 (mod64+ b0 b7)
            b7 (logxor (rol64 b7 35) b0))
      (setf b2 (mod64+ b2 b5)
            b5 (logxor (rol64 b5 56) b2))
      (setf b4 (mod64+ b4 b3)
            b3 (logxor (rol64 b3 22) b4))

      (setf b1 (mod64+ b1 k2)
            b0 (mod64+ b0 (mod64+ b1 k1))
            b1 (logxor (rol64 b1 46) b0))
      (setf b3 (mod64+ b3 k4)
            b2 (mod64+ b2 (mod64+ b3 k3))
            b3 (logxor (rol64 b3 36) b2))
      (setf b5 (mod64+ b5 (mod64+ k6 t1))
            b4 (mod64+ b4 (mod64+ b5 k5))
            b5 (logxor (rol64 b5 19) b4))
      (setf b7 (mod64+ b7 (mod64+ k8 10))
            b6 (mod64+ b6 (mod64+ b7 (mod64+ k7 t2)))
            b7 (logxor (rol64 b7 37) b6))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 33) b2))
      (setf b4 (mod64+ b4 b7)
            b7 (logxor (rol64 b7 27) b4))
      (setf b6 (mod64+ b6 b5)
            b5 (logxor (rol64 b5 14) b6))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 42) b0))
      (setf b4 (mod64+ b4 b1)
            b1 (logxor (rol64 b1 17) b4))
      (setf b6 (mod64+ b6 b3)
            b3 (logxor (rol64 b3 49) b6))
      (setf b0 (mod64+ b0 b5)
            b5 (logxor (rol64 b5 36) b0))
      (setf b2 (mod64+ b2 b7)
            b7 (logxor (rol64 b7 39) b2))
      (setf b6 (mod64+ b6 b1)
            b1 (logxor (rol64 b1 44) b6))
      (setf b0 (mod64+ b0 b7)
            b7 (logxor (rol64 b7 9) b0))
      (setf b2 (mod64+ b2 b5)
            b5 (logxor (rol64 b5 54) b2))
      (setf b4 (mod64+ b4 b3)
            b3 (logxor (rol64 b3 56) b4))
      (setf b1 (mod64+ b1 k3)
            b0 (mod64+ b0 (mod64+ b1 k2))
            b1 (logxor (rol64 b1 39) b0))
      (setf b3 (mod64+ b3 k5)
            b2 (mod64+ b2 (mod64+ b3 k4))
            b3 (logxor (rol64 b3 30) b2))
      (setf b5 (mod64+ b5 (mod64+ k7 t2))
            b4 (mod64+ b4 (mod64+ b5 k6))
            b5 (logxor (rol64 b5 34) b4))
      (setf b7 (mod64+ b7 (mod64+ k0 11))
            b6 (mod64+ b6 (mod64+ b7 (mod64+ k8 t0)))
            b7 (logxor (rol64 b7 24) b6))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 13) b2))
      (setf b4 (mod64+ b4 b7)
            b7 (logxor (rol64 b7 50) b4))
      (setf b6 (mod64+ b6 b5)
            b5 (logxor (rol64 b5 10) b6))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 17) b0))
      (setf b4 (mod64+ b4 b1)
            b1 (logxor (rol64 b1 25) b4))
      (setf b6 (mod64+ b6 b3)
            b3 (logxor (rol64 b3 29) b6))
      (setf b0 (mod64+ b0 b5)
            b5 (logxor (rol64 b5 39) b0))
      (setf b2 (mod64+ b2 b7)
            b7 (logxor (rol64 b7 43) b2))
      (setf b6 (mod64+ b6 b1)
            b1 (logxor (rol64 b1 8) b6))
      (setf b0 (mod64+ b0 b7)
            b7 (logxor (rol64 b7 35) b0))
      (setf b2 (mod64+ b2 b5)
            b5 (logxor (rol64 b5 56) b2))
      (setf b4 (mod64+ b4 b3)
            b3 (logxor (rol64 b3 22) b4))

      (setf b1 (mod64+ b1 k4)
            b0 (mod64+ b0 (mod64+ b1 k3))
            b1 (logxor (rol64 b1 46) b0))
      (setf b3 (mod64+ b3 k6)
            b2 (mod64+ b2 (mod64+ b3 k5))
            b3 (logxor (rol64 b3 36) b2))
      (setf b5 (mod64+ b5 (mod64+ k8 t0))
            b4 (mod64+ b4 (mod64+ b5 k7))
            b5 (logxor (rol64 b5 19) b4))
      (setf b7 (mod64+ b7 (mod64+ k1 12))
            b6 (mod64+ b6 (mod64+ b7 (mod64+ k0 t1)))
            b7 (logxor (rol64 b7 37) b6))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 33) b2))
      (setf b4 (mod64+ b4 b7)
            b7 (logxor (rol64 b7 27) b4))
      (setf b6 (mod64+ b6 b5)
            b5 (logxor (rol64 b5 14) b6))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 42) b0))
      (setf b4 (mod64+ b4 b1)
            b1 (logxor (rol64 b1 17) b4))
      (setf b6 (mod64+ b6 b3)
            b3 (logxor (rol64 b3 49) b6))
      (setf b0 (mod64+ b0 b5)
            b5 (logxor (rol64 b5 36) b0))
      (setf b2 (mod64+ b2 b7)
            b7 (logxor (rol64 b7 39) b2))
      (setf b6 (mod64+ b6 b1)
            b1 (logxor (rol64 b1 44) b6))
      (setf b0 (mod64+ b0 b7)
            b7 (logxor (rol64 b7 9) b0))
      (setf b2 (mod64+ b2 b5)
            b5 (logxor (rol64 b5 54) b2))
      (setf b4 (mod64+ b4 b3)
            b3 (logxor (rol64 b3 56) b4))
      (setf b1 (mod64+ b1 k5)
            b0 (mod64+ b0 (mod64+ b1 k4))
            b1 (logxor (rol64 b1 39) b0))
      (setf b3 (mod64+ b3 k7)
            b2 (mod64+ b2 (mod64+ b3 k6))
            b3 (logxor (rol64 b3 30) b2))
      (setf b5 (mod64+ b5 (mod64+ k0 t1))
            b4 (mod64+ b4 (mod64+ b5 k8))
            b5 (logxor (rol64 b5 34) b4))
      (setf b7 (mod64+ b7 (mod64+ k2 13))
            b6 (mod64+ b6 (mod64+ b7 (mod64+ k1 t2)))
            b7 (logxor (rol64 b7 24) b6))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 13) b2))
      (setf b4 (mod64+ b4 b7)
            b7 (logxor (rol64 b7 50) b4))
      (setf b6 (mod64+ b6 b5)
            b5 (logxor (rol64 b5 10) b6))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 17) b0))
      (setf b4 (mod64+ b4 b1)
            b1 (logxor (rol64 b1 25) b4))
      (setf b6 (mod64+ b6 b3)
            b3 (logxor (rol64 b3 29) b6))
      (setf b0 (mod64+ b0 b5)
            b5 (logxor (rol64 b5 39) b0))
      (setf b2 (mod64+ b2 b7)
            b7 (logxor (rol64 b7 43) b2))
      (setf b6 (mod64+ b6 b1)
            b1 (logxor (rol64 b1 8) b6))
      (setf b0 (mod64+ b0 b7)
            b7 (logxor (rol64 b7 35) b0))
      (setf b2 (mod64+ b2 b5)
            b5 (logxor (rol64 b5 56) b2))
      (setf b4 (mod64+ b4 b3)
            b3 (logxor (rol64 b3 22) b4))

      (setf b1 (mod64+ b1 k6)
            b0 (mod64+ b0 (mod64+ b1 k5))
            b1 (logxor (rol64 b1 46) b0))
      (setf b3 (mod64+ b3 k8)
            b2 (mod64+ b2 (mod64+ b3 k7))
            b3 (logxor (rol64 b3 36) b2))
      (setf b5 (mod64+ b5 (mod64+ k1 t2))
            b4 (mod64+ b4 (mod64+ b5 k0))
            b5 (logxor (rol64 b5 19) b4))
      (setf b7 (mod64+ b7 (mod64+ k3 14))
            b6 (mod64+ b6 (mod64+ b7 (mod64+ k2 t0)))
            b7 (logxor (rol64 b7 37) b6))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 33) b2))
      (setf b4 (mod64+ b4 b7)
            b7 (logxor (rol64 b7 27) b4))
      (setf b6 (mod64+ b6 b5)
            b5 (logxor (rol64 b5 14) b6))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 42) b0))
      (setf b4 (mod64+ b4 b1)
            b1 (logxor (rol64 b1 17) b4))
      (setf b6 (mod64+ b6 b3)
            b3 (logxor (rol64 b3 49) b6))
      (setf b0 (mod64+ b0 b5)
            b5 (logxor (rol64 b5 36) b0))
      (setf b2 (mod64+ b2 b7)
            b7 (logxor (rol64 b7 39) b2))
      (setf b6 (mod64+ b6 b1)
            b1 (logxor (rol64 b1 44) b6))
      (setf b0 (mod64+ b0 b7)
            b7 (logxor (rol64 b7 9) b0))
      (setf b2 (mod64+ b2 b5)
            b5 (logxor (rol64 b5 54) b2))
      (setf b4 (mod64+ b4 b3)
            b3 (logxor (rol64 b3 56) b4))
      (setf b1 (mod64+ b1 k7)
            b0 (mod64+ b0 (mod64+ b1 k6))
            b1 (logxor (rol64 b1 39) b0))
      (setf b3 (mod64+ b3 k0)
            b2 (mod64+ b2 (mod64+ b3 k8))
            b3 (logxor (rol64 b3 30) b2))
      (setf b5 (mod64+ b5 (mod64+ k2 t0))
            b4 (mod64+ b4 (mod64+ b5 k1))
            b5 (logxor (rol64 b5 34) b4))
      (setf b7 (mod64+ b7 (mod64+ k4 15))
            b6 (mod64+ b6 (mod64+ b7 (mod64+ k3 t1)))
            b7 (logxor (rol64 b7 24) b6))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 13) b2))
      (setf b4 (mod64+ b4 b7)
            b7 (logxor (rol64 b7 50) b4))
      (setf b6 (mod64+ b6 b5)
            b5 (logxor (rol64 b5 10) b6))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 17) b0))
      (setf b4 (mod64+ b4 b1)
            b1 (logxor (rol64 b1 25) b4))
      (setf b6 (mod64+ b6 b3)
            b3 (logxor (rol64 b3 29) b6))
      (setf b0 (mod64+ b0 b5)
            b5 (logxor (rol64 b5 39) b0))
      (setf b2 (mod64+ b2 b7)
            b7 (logxor (rol64 b7 43) b2))
      (setf b6 (mod64+ b6 b1)
            b1 (logxor (rol64 b1 8) b6))
      (setf b0 (mod64+ b0 b7)
            b7 (logxor (rol64 b7 35) b0))
      (setf b2 (mod64+ b2 b5)
            b5 (logxor (rol64 b5 56) b2))
      (setf b4 (mod64+ b4 b3)
            b3 (logxor (rol64 b3 22) b4))

      (setf b1 (mod64+ b1 k8)
            b0 (mod64+ b0 (mod64+ b1 k7))
            b1 (logxor (rol64 b1 46) b0))
      (setf b3 (mod64+ b3 k1)
            b2 (mod64+ b2 (mod64+ b3 k0))
            b3 (logxor (rol64 b3 36) b2))
      (setf b5 (mod64+ b5 (mod64+ k3 t1))
            b4 (mod64+ b4 (mod64+ b5 k2))
            b5 (logxor (rol64 b5 19) b4))
      (setf b7 (mod64+ b7 (mod64+ k5 16))
            b6 (mod64+ b6 (mod64+ b7 (mod64+ k4 t2)))
            b7 (logxor (rol64 b7 37) b6))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 33) b2))
      (setf b4 (mod64+ b4 b7)
            b7 (logxor (rol64 b7 27) b4))
      (setf b6 (mod64+ b6 b5)
            b5 (logxor (rol64 b5 14) b6))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 42) b0))
      (setf b4 (mod64+ b4 b1)
            b1 (logxor (rol64 b1 17) b4))
      (setf b6 (mod64+ b6 b3)
            b3 (logxor (rol64 b3 49) b6))
      (setf b0 (mod64+ b0 b5)
            b5 (logxor (rol64 b5 36) b0))
      (setf b2 (mod64+ b2 b7)
            b7 (logxor (rol64 b7 39) b2))
      (setf b6 (mod64+ b6 b1)
            b1 (logxor (rol64 b1 44) b6))
      (setf b0 (mod64+ b0 b7)
            b7 (logxor (rol64 b7 9) b0))
      (setf b2 (mod64+ b2 b5)
            b5 (logxor (rol64 b5 54) b2))
      (setf b4 (mod64+ b4 b3)
            b3 (logxor (rol64 b3 56) b4))
      (setf b1 (mod64+ b1 k0)
            b0 (mod64+ b0 (mod64+ b1 k8))
            b1 (logxor (rol64 b1 39) b0))
      (setf b3 (mod64+ b3 k2)
            b2 (mod64+ b2 (mod64+ b3 k1))
            b3 (logxor (rol64 b3 30) b2))
      (setf b5 (mod64+ b5 (mod64+ k4 t2))
            b4 (mod64+ b4 (mod64+ b5 k3))
            b5 (logxor (rol64 b5 34) b4))
      (setf b7 (mod64+ b7 (mod64+ k6 17))
            b6 (mod64+ b6 (mod64+ b7 (mod64+ k5 t0)))
            b7 (logxor (rol64 b7 24) b6))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 13) b2))
      (setf b4 (mod64+ b4 b7)
            b7 (logxor (rol64 b7 50) b4))
      (setf b6 (mod64+ b6 b5)
            b5 (logxor (rol64 b5 10) b6))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 17) b0))
      (setf b4 (mod64+ b4 b1)
            b1 (logxor (rol64 b1 25) b4))
      (setf b6 (mod64+ b6 b3)
            b3 (logxor (rol64 b3 29) b6))
      (setf b0 (mod64+ b0 b5)
            b5 (logxor (rol64 b5 39) b0))
      (setf b2 (mod64+ b2 b7)
            b7 (logxor (rol64 b7 43) b2))
      (setf b6 (mod64+ b6 b1)
            b1 (logxor (rol64 b1 8) b6))
      (setf b0 (mod64+ b0 b7)
            b7 (logxor (rol64 b7 35) b0))
      (setf b2 (mod64+ b2 b5)
            b5 (logxor (rol64 b5 56) b2))
      (setf b4 (mod64+ b4 b3)
            b3 (logxor (rol64 b3 22) b4))

      (setf b0 (mod64+ b0 k0)
            b1 (mod64+ b1 k1)
            b2 (mod64+ b2 k2)
            b3 (mod64+ b3 k3)
            b4 (mod64+ b4 k4)
            b5 (mod64+ b5 (mod64+ k5 t0))
            b6 (mod64+ b6 (mod64+ k6 t1))
            b7 (mod64+ b7 (mod64+ k7 18)))
      (store-words ciphertext ciphertext-start b0 b1 b2 b3 b4 b5 b6 b7)
      (values))))

(define-block-decryptor threefish512 64
  (let* ((key (threefish-key context))
         (tweak (threefish-tweak context))
         (k0 (aref key 0))
         (k1 (aref key 1))
         (k2 (aref key 2))
         (k3 (aref key 3))
         (k4 (aref key 4))
         (k5 (aref key 5))
         (k6 (aref key 6))
         (k7 (aref key 7))
         (k8 (aref key 8))
         (t0 (aref tweak 0))
         (t1 (aref tweak 1))
         (t2 (aref tweak 2)))
    (declare (type (unsigned-byte 64) k0 k1 k2 k3 k4 k5 k6 k7 k8 t0 t1 t2))
    (with-words ((b0 b1 b2 b3 b4 b5 b6 b7) ciphertext ciphertext-start :big-endian nil :size 8)
      (setf b0 (mod64- b0 k0)
            b1 (mod64- b1 k1)
            b2 (mod64- b2 k2)
            b3 (mod64- b3 k3)
            b4 (mod64- b4 k4)
            b5 (mod64- b5 (mod64+ k5 t0))
            b6 (mod64- b6 (mod64+ k6 t1))
            b7 (mod64- b7 (mod64+ k7 18)))

      (setf b3 (ror64 (logxor b3 b4) 22)
            b4 (mod64- b4 b3))
      (setf b5 (ror64 (logxor b5 b2) 56)
            b2 (mod64- b2 b5))
      (setf b7 (ror64 (logxor b7 b0) 35)
            b0 (mod64- b0 b7))
      (setf b1 (ror64 (logxor b1 b6) 8)
            b6 (mod64- b6 b1))
      (setf b7 (ror64 (logxor b7 b2) 43)
            b2 (mod64- b2 b7))
      (setf b5 (ror64 (logxor b5 b0) 39)
            b0 (mod64- b0 b5))
      (setf b3 (ror64 (logxor b3 b6) 29)
            b6 (mod64- b6 b3))
      (setf b1 (ror64 (logxor b1 b4) 25)
            b4 (mod64- b4 b1))
      (setf b3 (ror64 (logxor b3 b0) 17)
            b0 (mod64- b0 b3))
      (setf b5 (ror64 (logxor b5 b6) 10)
            b6 (mod64- b6 b5))
      (setf b7 (ror64 (logxor b7 b4) 50)
            b4 (mod64- b4 b7))
      (setf b1 (ror64 (logxor b1 b2) 13)
            b2 (mod64- b2 b1))
      (setf b7 (ror64 (logxor b7 b6) 24)
            b6 (mod64- b6 (mod64+ b7 (mod64+ k5 t0)))
            b7 (mod64- b7 (mod64+ k6 17)))
      (setf b5 (ror64 (logxor b5 b4) 34)
            b4 (mod64- b4 (mod64+ b5 k3))
            b5 (mod64- b5 (mod64+ k4 t2)))
      (setf b3 (ror64 (logxor b3 b2) 30)
            b2 (mod64- b2 (mod64+ b3 k1))
            b3 (mod64- b3 k2))
      (setf b1 (ror64 (logxor b1 b0) 39)
            b0 (mod64- b0 (mod64+ b1 k8))
            b1 (mod64- b1 k0))
      (setf b3 (ror64 (logxor b3 b4) 56)
            b4 (mod64- b4 b3))
      (setf b5 (ror64 (logxor b5 b2) 54)
            b2 (mod64- b2 b5))
      (setf b7 (ror64 (logxor b7 b0) 9)
            b0 (mod64- b0 b7))
      (setf b1 (ror64 (logxor b1 b6) 44)
            b6 (mod64- b6 b1))
      (setf b7 (ror64 (logxor b7 b2) 39)
            b2 (mod64- b2 b7))
      (setf b5 (ror64 (logxor b5 b0) 36)
            b0 (mod64- b0 b5))
      (setf b3 (ror64 (logxor b3 b6) 49)
            b6 (mod64- b6 b3))
      (setf b1 (ror64 (logxor b1 b4) 17)
            b4 (mod64- b4 b1))
      (setf b3 (ror64 (logxor b3 b0) 42)
            b0 (mod64- b0 b3))
      (setf b5 (ror64 (logxor b5 b6) 14)
            b6 (mod64- b6 b5))
      (setf b7 (ror64 (logxor b7 b4) 27)
            b4 (mod64- b4 b7))
      (setf b1 (ror64 (logxor b1 b2) 33)
            b2 (mod64- b2 b1))
      (setf b7 (ror64 (logxor b7 b6) 37)
            b6 (mod64- b6 (mod64+ b7 (mod64+ k4 t2)))
            b7 (mod64- b7 (mod64+ k5 16)))
      (setf b5 (ror64 (logxor b5 b4) 19)
            b4 (mod64- b4 (mod64+ b5 k2))
            b5 (mod64- b5 (mod64+ k3 t1)))
      (setf b3 (ror64 (logxor b3 b2) 36)
            b2 (mod64- b2 (mod64+ b3 k0))
            b3 (mod64- b3 k1))
      (setf b1 (ror64 (logxor b1 b0) 46)
            b0 (mod64- b0 (mod64+ b1 k7))
            b1 (mod64- b1 k8))

      (setf b3 (ror64 (logxor b3 b4) 22)
            b4 (mod64- b4 b3))
      (setf b5 (ror64 (logxor b5 b2) 56)
            b2 (mod64- b2 b5))
      (setf b7 (ror64 (logxor b7 b0) 35)
            b0 (mod64- b0 b7))
      (setf b1 (ror64 (logxor b1 b6) 8)
            b6 (mod64- b6 b1))
      (setf b7 (ror64 (logxor b7 b2) 43)
            b2 (mod64- b2 b7))
      (setf b5 (ror64 (logxor b5 b0) 39)
            b0 (mod64- b0 b5))
      (setf b3 (ror64 (logxor b3 b6) 29)
            b6 (mod64- b6 b3))
      (setf b1 (ror64 (logxor b1 b4) 25)
            b4 (mod64- b4 b1))
      (setf b3 (ror64 (logxor b3 b0) 17)
            b0 (mod64- b0 b3))
      (setf b5 (ror64 (logxor b5 b6) 10)
            b6 (mod64- b6 b5))
      (setf b7 (ror64 (logxor b7 b4) 50)
            b4 (mod64- b4 b7))
      (setf b1 (ror64 (logxor b1 b2) 13)
            b2 (mod64- b2 b1))
      (setf b7 (ror64 (logxor b7 b6) 24)
            b6 (mod64- b6 (mod64+ b7 (mod64+ k3 t1)))
            b7 (mod64- b7 (mod64+ k4 15)))
      (setf b5 (ror64 (logxor b5 b4) 34)
            b4 (mod64- b4 (mod64+ b5 k1))
            b5 (mod64- b5 (mod64+ k2 t0)))
      (setf b3 (ror64 (logxor b3 b2) 30)
            b2 (mod64- b2 (mod64+ b3 k8))
            b3 (mod64- b3 k0))
      (setf b1 (ror64 (logxor b1 b0) 39)
            b0 (mod64- b0 (mod64+ b1 k6))
            b1 (mod64- b1 k7))
      (setf b3 (ror64 (logxor b3 b4) 56)
            b4 (mod64- b4 b3))
      (setf b5 (ror64 (logxor b5 b2) 54)
            b2 (mod64- b2 b5))
      (setf b7 (ror64 (logxor b7 b0) 9)
            b0 (mod64- b0 b7))
      (setf b1 (ror64 (logxor b1 b6) 44)
            b6 (mod64- b6 b1))
      (setf b7 (ror64 (logxor b7 b2) 39)
            b2 (mod64- b2 b7))
      (setf b5 (ror64 (logxor b5 b0) 36)
            b0 (mod64- b0 b5))
      (setf b3 (ror64 (logxor b3 b6) 49)
            b6 (mod64- b6 b3))
      (setf b1 (ror64 (logxor b1 b4) 17)
            b4 (mod64- b4 b1))
      (setf b3 (ror64 (logxor b3 b0) 42)
            b0 (mod64- b0 b3))
      (setf b5 (ror64 (logxor b5 b6) 14)
            b6 (mod64- b6 b5))
      (setf b7 (ror64 (logxor b7 b4) 27)
            b4 (mod64- b4 b7))
      (setf b1 (ror64 (logxor b1 b2) 33)
            b2 (mod64- b2 b1))
      (setf b7 (ror64 (logxor b7 b6) 37)
            b6 (mod64- b6 (mod64+ b7 (mod64+ k2 t0)))
            b7 (mod64- b7 (mod64+ k3 14)))
      (setf b5 (ror64 (logxor b5 b4) 19)
            b4 (mod64- b4 (mod64+ b5 k0))
            b5 (mod64- b5 (mod64+ k1 t2)))
      (setf b3 (ror64 (logxor b3 b2) 36)
            b2 (mod64- b2 (mod64+ b3 k7))
            b3 (mod64- b3 k8))
      (setf b1 (ror64 (logxor b1 b0) 46)
            b0 (mod64- b0 (mod64+ b1 k5))
            b1 (mod64- b1 k6))

      (setf b3 (ror64 (logxor b3 b4) 22)
            b4 (mod64- b4 b3))
      (setf b5 (ror64 (logxor b5 b2) 56)
            b2 (mod64- b2 b5))
      (setf b7 (ror64 (logxor b7 b0) 35)
            b0 (mod64- b0 b7))
      (setf b1 (ror64 (logxor b1 b6) 8)
            b6 (mod64- b6 b1))
      (setf b7 (ror64 (logxor b7 b2) 43)
            b2 (mod64- b2 b7))
      (setf b5 (ror64 (logxor b5 b0) 39)
            b0 (mod64- b0 b5))
      (setf b3 (ror64 (logxor b3 b6) 29)
            b6 (mod64- b6 b3))
      (setf b1 (ror64 (logxor b1 b4) 25)
            b4 (mod64- b4 b1))
      (setf b3 (ror64 (logxor b3 b0) 17)
            b0 (mod64- b0 b3))
      (setf b5 (ror64 (logxor b5 b6) 10)
            b6 (mod64- b6 b5))
      (setf b7 (ror64 (logxor b7 b4) 50)
            b4 (mod64- b4 b7))
      (setf b1 (ror64 (logxor b1 b2) 13)
            b2 (mod64- b2 b1))
      (setf b7 (ror64 (logxor b7 b6) 24)
            b6 (mod64- b6 (mod64+ b7 (mod64+ k1 t2)))
            b7 (mod64- b7 (mod64+ k2 13)))
      (setf b5 (ror64 (logxor b5 b4) 34)
            b4 (mod64- b4 (mod64+ b5 k8))
            b5 (mod64- b5 (mod64+ k0 t1)))
      (setf b3 (ror64 (logxor b3 b2) 30)
            b2 (mod64- b2 (mod64+ b3 k6))
            b3 (mod64- b3 k7))
      (setf b1 (ror64 (logxor b1 b0) 39)
            b0 (mod64- b0 (mod64+ b1 k4))
            b1 (mod64- b1 k5))
      (setf b3 (ror64 (logxor b3 b4) 56)
            b4 (mod64- b4 b3))
      (setf b5 (ror64 (logxor b5 b2) 54)
            b2 (mod64- b2 b5))
      (setf b7 (ror64 (logxor b7 b0) 9)
            b0 (mod64- b0 b7))
      (setf b1 (ror64 (logxor b1 b6) 44)
            b6 (mod64- b6 b1))
      (setf b7 (ror64 (logxor b7 b2) 39)
            b2 (mod64- b2 b7))
      (setf b5 (ror64 (logxor b5 b0) 36)
            b0 (mod64- b0 b5))
      (setf b3 (ror64 (logxor b3 b6) 49)
            b6 (mod64- b6 b3))
      (setf b1 (ror64 (logxor b1 b4) 17)
            b4 (mod64- b4 b1))
      (setf b3 (ror64 (logxor b3 b0) 42)
            b0 (mod64- b0 b3))
      (setf b5 (ror64 (logxor b5 b6) 14)
            b6 (mod64- b6 b5))
      (setf b7 (ror64 (logxor b7 b4) 27)
            b4 (mod64- b4 b7))
      (setf b1 (ror64 (logxor b1 b2) 33)
            b2 (mod64- b2 b1))
      (setf b7 (ror64 (logxor b7 b6) 37)
            b6 (mod64- b6 (mod64+ b7 (mod64+ k0 t1)))
            b7 (mod64- b7 (mod64+ k1 12)))
      (setf b5 (ror64 (logxor b5 b4) 19)
            b4 (mod64- b4 (mod64+ b5 k7))
            b5 (mod64- b5 (mod64+ k8 t0)))
      (setf b3 (ror64 (logxor b3 b2) 36)
            b2 (mod64- b2 (mod64+ b3 k5))
            b3 (mod64- b3 k6))
      (setf b1 (ror64 (logxor b1 b0) 46)
            b0 (mod64- b0 (mod64+ b1 k3))
            b1 (mod64- b1 k4))

      (setf b3 (ror64 (logxor b3 b4) 22)
            b4 (mod64- b4 b3))
      (setf b5 (ror64 (logxor b5 b2) 56)
            b2 (mod64- b2 b5))
      (setf b7 (ror64 (logxor b7 b0) 35)
            b0 (mod64- b0 b7))
      (setf b1 (ror64 (logxor b1 b6) 8)
            b6 (mod64- b6 b1))
      (setf b7 (ror64 (logxor b7 b2) 43)
            b2 (mod64- b2 b7))
      (setf b5 (ror64 (logxor b5 b0) 39)
            b0 (mod64- b0 b5))
      (setf b3 (ror64 (logxor b3 b6) 29)
            b6 (mod64- b6 b3))
      (setf b1 (ror64 (logxor b1 b4) 25)
            b4 (mod64- b4 b1))
      (setf b3 (ror64 (logxor b3 b0) 17)
            b0 (mod64- b0 b3))
      (setf b5 (ror64 (logxor b5 b6) 10)
            b6 (mod64- b6 b5))
      (setf b7 (ror64 (logxor b7 b4) 50)
            b4 (mod64- b4 b7))
      (setf b1 (ror64 (logxor b1 b2) 13)
            b2 (mod64- b2 b1))
      (setf b7 (ror64 (logxor b7 b6) 24)
            b6 (mod64- b6 (mod64+ b7 (mod64+ k8 t0)))
            b7 (mod64- b7 (mod64+ k0 11)))
      (setf b5 (ror64 (logxor b5 b4) 34)
            b4 (mod64- b4 (mod64+ b5 k6))
            b5 (mod64- b5 (mod64+ k7 t2)))
      (setf b3 (ror64 (logxor b3 b2) 30)
            b2 (mod64- b2 (mod64+ b3 k4))
            b3 (mod64- b3 k5))
      (setf b1 (ror64 (logxor b1 b0) 39)
            b0 (mod64- b0 (mod64+ b1 k2))
            b1 (mod64- b1 k3))
      (setf b3 (ror64 (logxor b3 b4) 56)
            b4 (mod64- b4 b3))
      (setf b5 (ror64 (logxor b5 b2) 54)
            b2 (mod64- b2 b5))
      (setf b7 (ror64 (logxor b7 b0) 9)
            b0 (mod64- b0 b7))
      (setf b1 (ror64 (logxor b1 b6) 44)
            b6 (mod64- b6 b1))
      (setf b7 (ror64 (logxor b7 b2) 39)
            b2 (mod64- b2 b7))
      (setf b5 (ror64 (logxor b5 b0) 36)
            b0 (mod64- b0 b5))
      (setf b3 (ror64 (logxor b3 b6) 49)
            b6 (mod64- b6 b3))
      (setf b1 (ror64 (logxor b1 b4) 17)
            b4 (mod64- b4 b1))
      (setf b3 (ror64 (logxor b3 b0) 42)
            b0 (mod64- b0 b3))
      (setf b5 (ror64 (logxor b5 b6) 14)
            b6 (mod64- b6 b5))
      (setf b7 (ror64 (logxor b7 b4) 27)
            b4 (mod64- b4 b7))
      (setf b1 (ror64 (logxor b1 b2) 33)
            b2 (mod64- b2 b1))
      (setf b7 (ror64 (logxor b7 b6) 37)
            b6 (mod64- b6 (mod64+ b7 (mod64+ k7 t2)))
            b7 (mod64- b7 (mod64+ k8 10)))
      (setf b5 (ror64 (logxor b5 b4) 19)
            b4 (mod64- b4 (mod64+ b5 k5))
            b5 (mod64- b5 (mod64+ k6 t1)))
      (setf b3 (ror64 (logxor b3 b2) 36)
            b2 (mod64- b2 (mod64+ b3 k3))
            b3 (mod64- b3 k4))
      (setf b1 (ror64 (logxor b1 b0) 46)
            b0 (mod64- b0 (mod64+ b1 k1))
            b1 (mod64- b1 k2))

      (setf b3 (ror64 (logxor b3 b4) 22)
            b4 (mod64- b4 b3))
      (setf b5 (ror64 (logxor b5 b2) 56)
            b2 (mod64- b2 b5))
      (setf b7 (ror64 (logxor b7 b0) 35)
            b0 (mod64- b0 b7))
      (setf b1 (ror64 (logxor b1 b6) 8)
            b6 (mod64- b6 b1))
      (setf b7 (ror64 (logxor b7 b2) 43)
            b2 (mod64- b2 b7))
      (setf b5 (ror64 (logxor b5 b0) 39)
            b0 (mod64- b0 b5))
      (setf b3 (ror64 (logxor b3 b6) 29)
            b6 (mod64- b6 b3))
      (setf b1 (ror64 (logxor b1 b4) 25)
            b4 (mod64- b4 b1))
      (setf b3 (ror64 (logxor b3 b0) 17)
            b0 (mod64- b0 b3))
      (setf b5 (ror64 (logxor b5 b6) 10)
            b6 (mod64- b6 b5))
      (setf b7 (ror64 (logxor b7 b4) 50)
            b4 (mod64- b4 b7))
      (setf b1 (ror64 (logxor b1 b2) 13)
            b2 (mod64- b2 b1))
      (setf b7 (ror64 (logxor b7 b6) 24)
            b6 (mod64- b6 (mod64+ b7 (mod64+ k6 t1)))
            b7 (mod64- b7 (mod64+ k7 9)))
      (setf b5 (ror64 (logxor b5 b4) 34)
            b4 (mod64- b4 (mod64+ b5 k4))
            b5 (mod64- b5 (mod64+ k5 t0)))
      (setf b3 (ror64 (logxor b3 b2) 30)
            b2 (mod64- b2 (mod64+ b3 k2))
            b3 (mod64- b3 k3))
      (setf b1 (ror64 (logxor b1 b0) 39)
            b0 (mod64- b0 (mod64+ b1 k0))
            b1 (mod64- b1 k1))
      (setf b3 (ror64 (logxor b3 b4) 56)
            b4 (mod64- b4 b3))
      (setf b5 (ror64 (logxor b5 b2) 54)
            b2 (mod64- b2 b5))
      (setf b7 (ror64 (logxor b7 b0) 9)
            b0 (mod64- b0 b7))
      (setf b1 (ror64 (logxor b1 b6) 44)
            b6 (mod64- b6 b1))
      (setf b7 (ror64 (logxor b7 b2) 39)
            b2 (mod64- b2 b7))
      (setf b5 (ror64 (logxor b5 b0) 36)
            b0 (mod64- b0 b5))
      (setf b3 (ror64 (logxor b3 b6) 49)
            b6 (mod64- b6 b3))
      (setf b1 (ror64 (logxor b1 b4) 17)
            b4 (mod64- b4 b1))
      (setf b3 (ror64 (logxor b3 b0) 42)
            b0 (mod64- b0 b3))
      (setf b5 (ror64 (logxor b5 b6) 14)
            b6 (mod64- b6 b5))
      (setf b7 (ror64 (logxor b7 b4) 27)
            b4 (mod64- b4 b7))
      (setf b1 (ror64 (logxor b1 b2) 33)
            b2 (mod64- b2 b1))
      (setf b7 (ror64 (logxor b7 b6) 37)
            b6 (mod64- b6 (mod64+ b7 (mod64+ k5 t0)))
            b7 (mod64- b7 (mod64+ k6 8)))
      (setf b5 (ror64 (logxor b5 b4) 19)
            b4 (mod64- b4 (mod64+ b5 k3))
            b5 (mod64- b5 (mod64+ k4 t2)))
      (setf b3 (ror64 (logxor b3 b2) 36)
            b2 (mod64- b2 (mod64+ b3 k1))
            b3 (mod64- b3 k2))
      (setf b1 (ror64 (logxor b1 b0) 46)
            b0 (mod64- b0 (mod64+ b1 k8))
            b1 (mod64- b1 k0))

      (setf b3 (ror64 (logxor b3 b4) 22)
            b4 (mod64- b4 b3))
      (setf b5 (ror64 (logxor b5 b2) 56)
            b2 (mod64- b2 b5))
      (setf b7 (ror64 (logxor b7 b0) 35)
            b0 (mod64- b0 b7))
      (setf b1 (ror64 (logxor b1 b6) 8)
            b6 (mod64- b6 b1))
      (setf b7 (ror64 (logxor b7 b2) 43)
            b2 (mod64- b2 b7))
      (setf b5 (ror64 (logxor b5 b0) 39)
            b0 (mod64- b0 b5))
      (setf b3 (ror64 (logxor b3 b6) 29)
            b6 (mod64- b6 b3))
      (setf b1 (ror64 (logxor b1 b4) 25)
            b4 (mod64- b4 b1))
      (setf b3 (ror64 (logxor b3 b0) 17)
            b0 (mod64- b0 b3))
      (setf b5 (ror64 (logxor b5 b6) 10)
            b6 (mod64- b6 b5))
      (setf b7 (ror64 (logxor b7 b4) 50)
            b4 (mod64- b4 b7))
      (setf b1 (ror64 (logxor b1 b2) 13)
            b2 (mod64- b2 b1))
      (setf b7 (ror64 (logxor b7 b6) 24)
            b6 (mod64- b6 (mod64+ b7 (mod64+ k4 t2)))
            b7 (mod64- b7 (mod64+ k5 7)))
      (setf b5 (ror64 (logxor b5 b4) 34)
            b4 (mod64- b4 (mod64+ b5 k2))
            b5 (mod64- b5 (mod64+ k3 t1)))
      (setf b3 (ror64 (logxor b3 b2) 30)
            b2 (mod64- b2 (mod64+ b3 k0))
            b3 (mod64- b3 k1))
      (setf b1 (ror64 (logxor b1 b0) 39)
            b0 (mod64- b0 (mod64+ b1 k7))
            b1 (mod64- b1 k8))
      (setf b3 (ror64 (logxor b3 b4) 56)
            b4 (mod64- b4 b3))
      (setf b5 (ror64 (logxor b5 b2) 54)
            b2 (mod64- b2 b5))
      (setf b7 (ror64 (logxor b7 b0) 9)
            b0 (mod64- b0 b7))
      (setf b1 (ror64 (logxor b1 b6) 44)
            b6 (mod64- b6 b1))
      (setf b7 (ror64 (logxor b7 b2) 39)
            b2 (mod64- b2 b7))
      (setf b5 (ror64 (logxor b5 b0) 36)
            b0 (mod64- b0 b5))
      (setf b3 (ror64 (logxor b3 b6) 49)
            b6 (mod64- b6 b3))
      (setf b1 (ror64 (logxor b1 b4) 17)
            b4 (mod64- b4 b1))
      (setf b3 (ror64 (logxor b3 b0) 42)
            b0 (mod64- b0 b3))
      (setf b5 (ror64 (logxor b5 b6) 14)
            b6 (mod64- b6 b5))
      (setf b7 (ror64 (logxor b7 b4) 27)
            b4 (mod64- b4 b7))
      (setf b1 (ror64 (logxor b1 b2) 33)
            b2 (mod64- b2 b1))
      (setf b7 (ror64 (logxor b7 b6) 37)
            b6 (mod64- b6 (mod64+ b7 (mod64+ k3 t1)))
            b7 (mod64- b7 (mod64+ k4 6)))
      (setf b5 (ror64 (logxor b5 b4) 19)
            b4 (mod64- b4 (mod64+ b5 k1))
            b5 (mod64- b5 (mod64+ k2 t0)))
      (setf b3 (ror64 (logxor b3 b2) 36)
            b2 (mod64- b2 (mod64+ b3 k8))
            b3 (mod64- b3 k0))
      (setf b1 (ror64 (logxor b1 b0) 46)
            b0 (mod64- b0 (mod64+ b1 k6))
            b1 (mod64- b1 k7))

      (setf b3 (ror64 (logxor b3 b4) 22)
            b4 (mod64- b4 b3))
      (setf b5 (ror64 (logxor b5 b2) 56)
            b2 (mod64- b2 b5))
      (setf b7 (ror64 (logxor b7 b0) 35)
            b0 (mod64- b0 b7))
      (setf b1 (ror64 (logxor b1 b6) 8)
            b6 (mod64- b6 b1))
      (setf b7 (ror64 (logxor b7 b2) 43)
            b2 (mod64- b2 b7))
      (setf b5 (ror64 (logxor b5 b0) 39)
            b0 (mod64- b0 b5))
      (setf b3 (ror64 (logxor b3 b6) 29)
            b6 (mod64- b6 b3))
      (setf b1 (ror64 (logxor b1 b4) 25)
            b4 (mod64- b4 b1))
      (setf b3 (ror64 (logxor b3 b0) 17)
            b0 (mod64- b0 b3))
      (setf b5 (ror64 (logxor b5 b6) 10)
            b6 (mod64- b6 b5))
      (setf b7 (ror64 (logxor b7 b4) 50)
            b4 (mod64- b4 b7))
      (setf b1 (ror64 (logxor b1 b2) 13)
            b2 (mod64- b2 b1))
      (setf b7 (ror64 (logxor b7 b6) 24)
            b6 (mod64- b6 (mod64+ b7 (mod64+ k2 t0)))
            b7 (mod64- b7 (mod64+ k3 5)))
      (setf b5 (ror64 (logxor b5 b4) 34)
            b4 (mod64- b4 (mod64+ b5 k0))
            b5 (mod64- b5 (mod64+ k1 t2)))
      (setf b3 (ror64 (logxor b3 b2) 30)
            b2 (mod64- b2 (mod64+ b3 k7))
            b3 (mod64- b3 k8))
      (setf b1 (ror64 (logxor b1 b0) 39)
            b0 (mod64- b0 (mod64+ b1 k5))
            b1 (mod64- b1 k6))
      (setf b3 (ror64 (logxor b3 b4) 56)
            b4 (mod64- b4 b3))
      (setf b5 (ror64 (logxor b5 b2) 54)
            b2 (mod64- b2 b5))
      (setf b7 (ror64 (logxor b7 b0) 9)
            b0 (mod64- b0 b7))
      (setf b1 (ror64 (logxor b1 b6) 44)
            b6 (mod64- b6 b1))
      (setf b7 (ror64 (logxor b7 b2) 39)
            b2 (mod64- b2 b7))
      (setf b5 (ror64 (logxor b5 b0) 36)
            b0 (mod64- b0 b5))
      (setf b3 (ror64 (logxor b3 b6) 49)
            b6 (mod64- b6 b3))
      (setf b1 (ror64 (logxor b1 b4) 17)
            b4 (mod64- b4 b1))
      (setf b3 (ror64 (logxor b3 b0) 42)
            b0 (mod64- b0 b3))
      (setf b5 (ror64 (logxor b5 b6) 14)
            b6 (mod64- b6 b5))
      (setf b7 (ror64 (logxor b7 b4) 27)
            b4 (mod64- b4 b7))
      (setf b1 (ror64 (logxor b1 b2) 33)
            b2 (mod64- b2 b1))
      (setf b7 (ror64 (logxor b7 b6) 37)
            b6 (mod64- b6 (mod64+ b7 (mod64+ k1 t2)))
            b7 (mod64- b7 (mod64+ k2 4)))
      (setf b5 (ror64 (logxor b5 b4) 19)
            b4 (mod64- b4 (mod64+ b5 k8))
            b5 (mod64- b5 (mod64+ k0 t1)))
      (setf b3 (ror64 (logxor b3 b2) 36)
            b2 (mod64- b2 (mod64+ b3 k6))
            b3 (mod64- b3 k7))
      (setf b1 (ror64 (logxor b1 b0) 46)
            b0 (mod64- b0 (mod64+ b1 k4))
            b1 (mod64- b1 k5))

      (setf b3 (ror64 (logxor b3 b4) 22)
            b4 (mod64- b4 b3))
      (setf b5 (ror64 (logxor b5 b2) 56)
            b2 (mod64- b2 b5))
      (setf b7 (ror64 (logxor b7 b0) 35)
            b0 (mod64- b0 b7))
      (setf b1 (ror64 (logxor b1 b6) 8)
            b6 (mod64- b6 b1))
      (setf b7 (ror64 (logxor b7 b2) 43)
            b2 (mod64- b2 b7))
      (setf b5 (ror64 (logxor b5 b0) 39)
            b0 (mod64- b0 b5))
      (setf b3 (ror64 (logxor b3 b6) 29)
            b6 (mod64- b6 b3))
      (setf b1 (ror64 (logxor b1 b4) 25)
            b4 (mod64- b4 b1))
      (setf b3 (ror64 (logxor b3 b0) 17)
            b0 (mod64- b0 b3))
      (setf b5 (ror64 (logxor b5 b6) 10)
            b6 (mod64- b6 b5))
      (setf b7 (ror64 (logxor b7 b4) 50)
            b4 (mod64- b4 b7))
      (setf b1 (ror64 (logxor b1 b2) 13)
            b2 (mod64- b2 b1))
      (setf b7 (ror64 (logxor b7 b6) 24)
            b6 (mod64- b6 (mod64+ b7 (mod64+ k0 t1)))
            b7 (mod64- b7 (mod64+ k1 3)))
      (setf b5 (ror64 (logxor b5 b4) 34)
            b4 (mod64- b4 (mod64+ b5 k7))
            b5 (mod64- b5 (mod64+ k8 t0)))
      (setf b3 (ror64 (logxor b3 b2) 30)
            b2 (mod64- b2 (mod64+ b3 k5))
            b3 (mod64- b3 k6))
      (setf b1 (ror64 (logxor b1 b0) 39)
            b0 (mod64- b0 (mod64+ b1 k3))
            b1 (mod64- b1 k4))
      (setf b3 (ror64 (logxor b3 b4) 56)
            b4 (mod64- b4 b3))
      (setf b5 (ror64 (logxor b5 b2) 54)
            b2 (mod64- b2 b5))
      (setf b7 (ror64 (logxor b7 b0) 9)
            b0 (mod64- b0 b7))
      (setf b1 (ror64 (logxor b1 b6) 44)
            b6 (mod64- b6 b1))
      (setf b7 (ror64 (logxor b7 b2) 39)
            b2 (mod64- b2 b7))
      (setf b5 (ror64 (logxor b5 b0) 36)
            b0 (mod64- b0 b5))
      (setf b3 (ror64 (logxor b3 b6) 49)
            b6 (mod64- b6 b3))
      (setf b1 (ror64 (logxor b1 b4) 17)
            b4 (mod64- b4 b1))
      (setf b3 (ror64 (logxor b3 b0) 42)
            b0 (mod64- b0 b3))
      (setf b5 (ror64 (logxor b5 b6) 14)
            b6 (mod64- b6 b5))
      (setf b7 (ror64 (logxor b7 b4) 27)
            b4 (mod64- b4 b7))
      (setf b1 (ror64 (logxor b1 b2) 33)
            b2 (mod64- b2 b1))
      (setf b7 (ror64 (logxor b7 b6) 37)
            b6 (mod64- b6 (mod64+ b7 (mod64+ k8 t0)))
            b7 (mod64- b7 (mod64+ k0 2)))
      (setf b5 (ror64 (logxor b5 b4) 19)
            b4 (mod64- b4 (mod64+ b5 k6))
            b5 (mod64- b5 (mod64+ k7 t2)))
      (setf b3 (ror64 (logxor b3 b2) 36)
            b2 (mod64- b2 (mod64+ b3 k4))
            b3 (mod64- b3 k5))
      (setf b1 (ror64 (logxor b1 b0) 46)
            b0 (mod64- b0 (mod64+ b1 k2))
            b1 (mod64- b1 k3))

      (setf b3 (ror64 (logxor b3 b4) 22)
            b4 (mod64- b4 b3))
      (setf b5 (ror64 (logxor b5 b2) 56)
            b2 (mod64- b2 b5))
      (setf b7 (ror64 (logxor b7 b0) 35)
            b0 (mod64- b0 b7))
      (setf b1 (ror64 (logxor b1 b6) 8)
            b6 (mod64- b6 b1))
      (setf b7 (ror64 (logxor b7 b2) 43)
            b2 (mod64- b2 b7))
      (setf b5 (ror64 (logxor b5 b0) 39)
            b0 (mod64- b0 b5))
      (setf b3 (ror64 (logxor b3 b6) 29)
            b6 (mod64- b6 b3))
      (setf b1 (ror64 (logxor b1 b4) 25)
            b4 (mod64- b4 b1))
      (setf b3 (ror64 (logxor b3 b0) 17)
            b0 (mod64- b0 b3))
      (setf b5 (ror64 (logxor b5 b6) 10)
            b6 (mod64- b6 b5))
      (setf b7 (ror64 (logxor b7 b4) 50)
            b4 (mod64- b4 b7))
      (setf b1 (ror64 (logxor b1 b2) 13)
            b2 (mod64- b2 b1))
      (setf b7 (ror64 (logxor b7 b6) 24)
            b6 (mod64- b6 (mod64+ b7 (mod64+ k7 t2)))
            b7 (mod64- b7 (mod64+ k8 1)))
      (setf b5 (ror64 (logxor b5 b4) 34)
            b4 (mod64- b4 (mod64+ b5 k5))
            b5 (mod64- b5 (mod64+ k6 t1)))
      (setf b3 (ror64 (logxor b3 b2) 30)
            b2 (mod64- b2 (mod64+ b3 k3))
            b3 (mod64- b3 k4))
      (setf b1 (ror64 (logxor b1 b0) 39)
            b0 (mod64- b0 (mod64+ b1 k1))
            b1 (mod64- b1 k2))
      (setf b3 (ror64 (logxor b3 b4) 56)
            b4 (mod64- b4 b3))
      (setf b5 (ror64 (logxor b5 b2) 54)
            b2 (mod64- b2 b5))
      (setf b7 (ror64 (logxor b7 b0) 9)
            b0 (mod64- b0 b7))
      (setf b1 (ror64 (logxor b1 b6) 44)
            b6 (mod64- b6 b1))
      (setf b7 (ror64 (logxor b7 b2) 39)
            b2 (mod64- b2 b7))
      (setf b5 (ror64 (logxor b5 b0) 36)
            b0 (mod64- b0 b5))
      (setf b3 (ror64 (logxor b3 b6) 49)
            b6 (mod64- b6 b3))
      (setf b1 (ror64 (logxor b1 b4) 17)
            b4 (mod64- b4 b1))
      (setf b3 (ror64 (logxor b3 b0) 42)
            b0 (mod64- b0 b3))
      (setf b5 (ror64 (logxor b5 b6) 14)
            b6 (mod64- b6 b5))
      (setf b7 (ror64 (logxor b7 b4) 27)
            b4 (mod64- b4 b7))
      (setf b1 (ror64 (logxor b1 b2) 33)
            b2 (mod64- b2 b1))
      (setf b7 (ror64 (logxor b7 b6) 37)
            b6 (mod64- b6 (mod64+ b7 (mod64+ k6 t1)))
            b7 (mod64- b7 k7))
      (setf b5 (ror64 (logxor b5 b4) 19)
            b4 (mod64- b4 (mod64+ b5 k4))
            b5 (mod64- b5 (mod64+ k5 t0)))
      (setf b3 (ror64 (logxor b3 b2) 36)
            b2 (mod64- b2 (mod64+ b3 k2))
            b3 (mod64- b3 k3))
      (setf b1 (ror64 (logxor b1 b0) 46)
            b0 (mod64- b0 (mod64+ b1 k0))
            b1 (mod64- b1 k1))

      (store-words plaintext plaintext-start b0 b1 b2 b3 b4 b5 b6 b7)
      (values))))

(defcipher threefish512
  (:encrypt-function threefish512-encrypt-block)
  (:decrypt-function threefish512-decrypt-block)
  (:block-length 64)
  (:key-length (:fixed 64)))

#|
;;; Implementation for blocks of 1024 bits

(define-block-encryptor threefish1024 128
  (values))

(define-block-decryptor threefish1024 128
  (values))

(defcipher threefish1024
  (:encrypt-function threefish1024-encrypt-block)
  (:decrypt-function threefish1024-decrypt-block)
  (:block-length 128)
  (:key-length (:fixed 128)))
|#
