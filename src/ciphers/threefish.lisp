;;;; -*- mode: lisp; indent-tabs-mode: nil -*-
;;;; threefish.lisp -- implementation of the Threefish block cipher

(in-package :crypto)


;;; Constants

(defconstant +threefish-key-schedule-constant+ #x1BD11BDAA9FC1A22)


;;; Common functions

(defun threefish-key-schedule (cipher key-data)
  (let* ((key-words (/ (block-length cipher) 8))
         (key (make-array (1+ key-words)
                          :element-type '(unsigned-byte 64)
                          :initial-element 0))
         (parity +threefish-key-schedule-constant+))
    (dotimes (i key-words)
      (let ((n (ub64ref/le key-data (* 8 i))))
        (setf (aref key i) n)
        (setf parity (logxor parity n))))
    (setf (aref key key-words) parity)
    (setf (threefish-key cipher) key)
    (values)))


;;; 256 bit blocks

(defclass threefish256 (cipher 32-byte-block-mixin)
  ((key :accessor threefish-key
        :type '(simple-array (unsigned-byte 64) (5)))
   (tweak :accessor threefish-tweak
          :initform (make-array 3
                                :element-type '(unsigned-byte 64)
                                :initial-contents '(0 0 0))
          :type '(simple-array (unsigned-byte 64) (3)))))

(defmethod shared-initialize :after ((cipher threefish256) slot-names
                                     &rest initargs
                                     &key (key nil key-p)
                                     (tweak nil tweak-p)
                                     &allow-other-keys)
  (when tweak
    (setf (aref (threefish-tweak cipher) 0) (ub64ref/le tweak 0)
          (aref (threefish-tweak cipher) 1) (ub64ref/le tweak 8)
          (aref (threefish-tweak cipher) 2) (logxor (aref (threefish-tweak cipher) 0)
                                                    (aref (threefish-tweak cipher) 1))))
  cipher)

(defmethod schedule-key ((cipher threefish256) key)
  (threefish-key-schedule cipher key)
  cipher)

(define-block-encryptor threefish256 32
  (let* ((key (threefish-key context))
         (tweak (threefish-tweak context))
         (k0 (aref key 0))
         (k1 (aref key 1))
         (k2 (aref key 2))
         (k3 (aref key 3))
         (k4 (aref key 4))
         (t0 (aref tweak 0))
         (t1 (aref tweak 1))
         (t2 (aref tweak 2)))
    (declare (type (unsigned-byte 64) k0 k1 k2 k3 k4 t0 t1 t2))
    (with-words ((b0 b1 b2 b3) plaintext plaintext-start :big-endian nil :size 8)
      (setf b1 (mod64+ b1 (mod64+ k1 t0))
            b0 (mod64+ b0 (mod64+ b1 k0))
            b1 (logxor (rol64 b1 14) b0))
      (setf b3 (mod64+ b3 k3)
            b2 (mod64+ b2 (mod64+ b3 (mod64+ k2 t1)))
            b3 (logxor (rol64 b3 16) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 52) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 57) b2))
      (setf b0 (mod64+ b0 b1)
            b1 (logxor (rol64 b1 23) b0))
      (setf b2 (mod64+ b2 b3)
            b3 (logxor (rol64 b3 40) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 5) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 37) b2))
      (setf b1 (mod64+ b1 (mod64+ k2 t1))
            b0 (mod64+ b0 (mod64+ b1 k1))
            b1 (logxor (rol64 b1 25) b0))
      (setf b3 (mod64+ b3 (mod64+ k4 1))
            b2 (mod64+ b2 (mod64+ b3 (mod64+ k3 t2)))
            b3 (logxor (rol64 b3 33) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 46) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 12) b2))
      (setf b0 (mod64+ b0 b1)
            b1 (logxor (rol64 b1 58) b0))
      (setf b2 (mod64+ b2 b3)
            b3 (logxor (rol64 b3 22) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 32) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 32) b2))

      (setf b1 (mod64+ b1 (mod64+ k3 t2))
            b0 (mod64+ b0 (mod64+ b1 k2))
            b1 (logxor (rol64 b1 14) b0))
      (setf b3 (mod64+ b3 (mod64+ k0 2))
            b2 (mod64+ b2 (mod64+ b3 (mod64+ k4 t0)))
            b3 (logxor (rol64 b3 16) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 52) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 57) b2))
      (setf b0 (mod64+ b0 b1)
            b1 (logxor (rol64 b1 23) b0))
      (setf b2 (mod64+ b2 b3)
            b3 (logxor (rol64 b3 40) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 5) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 37) b2))
      (setf b1 (mod64+ b1 (mod64+ k4 t0))
            b0 (mod64+ b0 (mod64+ b1 k3))
            b1 (logxor (rol64 b1 25) b0))
      (setf b3 (mod64+ b3 (mod64+ k1 3))
            b2 (mod64+ b2 (mod64+ b3 (mod64+ k0 t1)))
            b3 (logxor (rol64 b3 33) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 46) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 12) b2))
      (setf b0 (mod64+ b0 b1)
            b1 (logxor (rol64 b1 58) b0))
      (setf b2 (mod64+ b2 b3)
            b3 (logxor (rol64 b3 22) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 32) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 32) b2))

      (setf b1 (mod64+ b1 (mod64+ k0 t1))
            b0 (mod64+ b0 (mod64+ b1 k4))
            b1 (logxor (rol64 b1 14) b0))
      (setf b3 (mod64+ b3 (mod64+ k2 4))
            b2 (mod64+ b2 (mod64+ b3 (mod64+ k1 t2)))
            b3 (logxor (rol64 b3 16) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 52) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 57) b2))
      (setf b0 (mod64+ b0 b1)
            b1 (logxor (rol64 b1 23) b0))
      (setf b2 (mod64+ b2 b3)
            b3 (logxor (rol64 b3 40) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 5) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 37) b2))
      (setf b1 (mod64+ b1 (mod64+ k1 t2))
            b0 (mod64+ b0 (mod64+ b1 k0))
            b1 (logxor (rol64 b1 25) b0))
      (setf b3 (mod64+ b3 (mod64+ k3 5))
            b2 (mod64+ b2 (mod64+ b3 (mod64+ k2 t0)))
            b3 (logxor (rol64 b3 33) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 46) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 12) b2))
      (setf b0 (mod64+ b0 b1)
            b1 (logxor (rol64 b1 58) b0))
      (setf b2 (mod64+ b2 b3)
            b3 (logxor (rol64 b3 22) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 32) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 32) b2))

      (setf b1 (mod64+ b1 (mod64+ k2 t0))
            b0 (mod64+ b0 (mod64+ b1 k1))
            b1 (logxor (rol64 b1 14) b0))
      (setf b3 (mod64+ b3 (mod64+ k4 6))
            b2 (mod64+ b2 (mod64+ b3 (mod64+ k3 t1)))
            b3 (logxor (rol64 b3 16) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 52) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 57) b2))
      (setf b0 (mod64+ b0 b1)
            b1 (logxor (rol64 b1 23) b0))
      (setf b2 (mod64+ b2 b3)
            b3 (logxor (rol64 b3 40) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 5) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 37) b2))
      (setf b1 (mod64+ b1 (mod64+ k3 t1))
            b0 (mod64+ b0 (mod64+ b1 k2))
            b1 (logxor (rol64 b1 25) b0))
      (setf b3 (mod64+ b3 (mod64+ k0 7))
            b2 (mod64+ b2 (mod64+ b3 (mod64+ k4 t2)))
            b3 (logxor (rol64 b3 33) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 46) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 12) b2))
      (setf b0 (mod64+ b0 b1)
            b1 (logxor (rol64 b1 58) b0))
      (setf b2 (mod64+ b2 b3)
            b3 (logxor (rol64 b3 22) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 32) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 32) b2))

      (setf b1 (mod64+ b1 (mod64+ k4 t2))
            b0 (mod64+ b0 (mod64+ b1 k3))
            b1 (logxor (rol64 b1 14) b0))
      (setf b3 (mod64+ b3 (mod64+ k1 8))
            b2 (mod64+ b2 (mod64+ b3 (mod64+ k0 t0)))
            b3 (logxor (rol64 b3 16) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 52) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 57) b2))
      (setf b0 (mod64+ b0 b1)
            b1 (logxor (rol64 b1 23) b0))
      (setf b2 (mod64+ b2 b3)
            b3 (logxor (rol64 b3 40) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 5) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 37) b2))
      (setf b1 (mod64+ b1 (mod64+ k0 t0))
            b0 (mod64+ b0 (mod64+ b1 k4))
            b1 (logxor (rol64 b1 25) b0))
      (setf b3 (mod64+ b3 (mod64+ k2 9))
            b2 (mod64+ b2 (mod64+ b3 (mod64+ k1 t1)))
            b3 (logxor (rol64 b3 33) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 46) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 12) b2))
      (setf b0 (mod64+ b0 b1)
            b1 (logxor (rol64 b1 58) b0))
      (setf b2 (mod64+ b2 b3)
            b3 (logxor (rol64 b3 22) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 32) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 32) b2))

      (setf b1 (mod64+ b1 (mod64+ k1 t1))
            b0 (mod64+ b0 (mod64+ b1 k0))
            b1 (logxor (rol64 b1 14) b0))
      (setf b3 (mod64+ b3 (mod64+ k3 10))
            b2 (mod64+ b2 (mod64+ b3 (mod64+ k2 t2)))
            b3 (logxor (rol64 b3 16) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 52) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 57) b2))
      (setf b0 (mod64+ b0 b1)
            b1 (logxor (rol64 b1 23) b0))
      (setf b2 (mod64+ b2 b3)
            b3 (logxor (rol64 b3 40) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 5) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 37) b2))
      (setf b1 (mod64+ b1 (mod64+ k2 t2))
            b0 (mod64+ b0 (mod64+ b1 k1))
            b1 (logxor (rol64 b1 25) b0))
      (setf b3 (mod64+ b3 (mod64+ k4 11))
            b2 (mod64+ b2 (mod64+ b3 (mod64+ k3 t0)))
            b3 (logxor (rol64 b3 33) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 46) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 12) b2))
      (setf b0 (mod64+ b0 b1)
            b1 (logxor (rol64 b1 58) b0))
      (setf b2 (mod64+ b2 b3)
            b3 (logxor (rol64 b3 22) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 32) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 32) b2))

      (setf b1 (mod64+ b1 (mod64+ k3 t0))
            b0 (mod64+ b0 (mod64+ b1 k2))
            b1 (logxor (rol64 b1 14) b0))
      (setf b3 (mod64+ b3 (mod64+ k0 12))
            b2 (mod64+ b2 (mod64+ b3 (mod64+ k4 t1)))
            b3 (logxor (rol64 b3 16) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 52) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 57) b2))
      (setf b0 (mod64+ b0 b1)
            b1 (logxor (rol64 b1 23) b0))
      (setf b2 (mod64+ b2 b3)
            b3 (logxor (rol64 b3 40) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 5) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 37) b2))
      (setf b1 (mod64+ b1 (mod64+ k4 t1))
            b0 (mod64+ b0 (mod64+ b1 k3))
            b1 (logxor (rol64 b1 25) b0))
      (setf b3 (mod64+ b3 (mod64+ k1 13))
            b2 (mod64+ b2 (mod64+ b3 (mod64+ k0 t2)))
            b3 (logxor (rol64 b3 33) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 46) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 12) b2))
      (setf b0 (mod64+ b0 b1)
            b1 (logxor (rol64 b1 58) b0))
      (setf b2 (mod64+ b2 b3)
            b3 (logxor (rol64 b3 22) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 32) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 32) b2))

      (setf b1 (mod64+ b1 (mod64+ k0 t2))
            b0 (mod64+ b0 (mod64+ b1 k4))
            b1 (logxor (rol64 b1 14) b0))
      (setf b3 (mod64+ b3 (mod64+ k2 14))
            b2 (mod64+ b2 (mod64+ b3 (mod64+ k1 t0)))
            b3 (logxor (rol64 b3 16) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 52) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 57) b2))
      (setf b0 (mod64+ b0 b1)
            b1 (logxor (rol64 b1 23) b0))
      (setf b2 (mod64+ b2 b3)
            b3 (logxor (rol64 b3 40) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 5) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 37) b2))
      (setf b1 (mod64+ b1 (mod64+ k1 t0))
            b0 (mod64+ b0 (mod64+ b1 k0))
            b1 (logxor (rol64 b1 25) b0))
      (setf b3 (mod64+ b3 (mod64+ k3 15))
            b2 (mod64+ b2 (mod64+ b3 (mod64+ k2 t1)))
            b3 (logxor (rol64 b3 33) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 46) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 12) b2))
      (setf b0 (mod64+ b0 b1)
            b1 (logxor (rol64 b1 58) b0))
      (setf b2 (mod64+ b2 b3)
            b3 (logxor (rol64 b3 22) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 32) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 32) b2))

      (setf b1 (mod64+ b1 (mod64+ k2 t1))
            b0 (mod64+ b0 (mod64+ b1 k1))
            b1 (logxor (rol64 b1 14) b0))
      (setf b3 (mod64+ b3 (mod64+ k4 16))
            b2 (mod64+ b2 (mod64+ b3 (mod64+ k3 t2)))
            b3 (logxor (rol64 b3 16) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 52) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 57) b2))
      (setf b0 (mod64+ b0 b1)
            b1 (logxor (rol64 b1 23) b0))
      (setf b2 (mod64+ b2 b3)
            b3 (logxor (rol64 b3 40) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 5) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 37) b2))
      (setf b1 (mod64+ b1 (mod64+ k3 t2))
            b0 (mod64+ b0 (mod64+ b1 k2))
            b1 (logxor (rol64 b1 25) b0))
      (setf b3 (mod64+ b3 (mod64+ k0 17))
            b2 (mod64+ b2 (mod64+ b3 (mod64+ k4 t0)))
            b3 (logxor (rol64 b3 33) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 46) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 12) b2))
      (setf b0 (mod64+ b0 b1)
            b1 (logxor (rol64 b1 58) b0))
      (setf b2 (mod64+ b2 b3)
            b3 (logxor (rol64 b3 22) b2))
      (setf b0 (mod64+ b0 b3)
            b3 (logxor (rol64 b3 32) b0))
      (setf b2 (mod64+ b2 b1)
            b1 (logxor (rol64 b1 32) b2))

      (setf b0 (mod64+ b0 k3)
            b1 (mod64+ b1 (mod64+ k4 t0))
            b2 (mod64+ b2 (mod64+ k0 t1))
            b3 (mod64+ b3 (mod64+ k1 18)))
      (store-words ciphertext ciphertext-start b0 b1 b2 b3)
      (values))))

(define-block-decryptor threefish256 32
  (let* ((key (threefish-key context))
         (tweak (threefish-tweak context))
         (k0 (aref key 0))
         (k1 (aref key 1))
         (k2 (aref key 2))
         (k3 (aref key 3))
         (k4 (aref key 4))
         (t0 (aref tweak 0))
         (t1 (aref tweak 1))
         (t2 (aref tweak 2))
         (tmp 0))
    (declare (type (unsigned-byte 64) k0 k1 k2 k3 k4 t0 t1 t2 tmp))
    (with-words ((b0 b1 b2 b3) ciphertext ciphertext-start :big-endian nil :size 8)
      (setf b0 (mod64- b0 k3)
            b1 (mod64- b1 (mod64+ k4 t0))
            b2 (mod64- b2 (mod64+ k0 t1))
            b3 (mod64- b3 (mod64+ k1 18)))

      (setf b3 (ror64 (logxor b3 b0) 32)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 32)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 58)
            b0 (mod64- b0 b1))
      (setf b3 (ror64 (logxor b3 b2) 22)
            b2 (mod64- b2 b3))
      (setf b3 (ror64 (logxor b3 b0) 46)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 12)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 25)
            b0 (mod64- b0 (mod64+ b1 k2))
            b1 (mod64- b1 (mod64+ k3 t2)))
      (setf b3 (ror64 (logxor b3 b2) 33)
            b2 (mod64- b2 (mod64+ b3 (mod64+ k4 t0)))
            b3 (mod64- b3 (mod64+ k0 17)))
      (setf b3 (ror64 (logxor b3 b0) 5)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 37)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 23)
            b0 (mod64- b0 b1))
      (setf b3 (ror64 (logxor b3 b2) 40)
            b2 (mod64- b2 b3))
      (setf b3 (ror64 (logxor b3 b0) 52)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 57)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 14)
            b0 (mod64- b0 (mod64+ b1 k1))
            b1 (mod64- b1 (mod64+ k2 t1)))
      (setf b3 (ror64 (logxor b3 b2) 16)
            b2 (mod64- b2 (mod64+ b3 (mod64+ k3 t2)))
            b3 (mod64- b3 (mod64+ k4 16)))

      (setf b3 (ror64 (logxor b3 b0) 32)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 32)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 58)
            b0 (mod64- b0 b1))
      (setf b3 (ror64 (logxor b3 b2) 22)
            b2 (mod64- b2 b3))
      (setf b3 (ror64 (logxor b3 b0) 46)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 12)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 25)
            b0 (mod64- b0 (mod64+ b1 k0))
            b1 (mod64- b1 (mod64+ k1 t0)))
      (setf b3 (ror64 (logxor b3 b2) 33)
            b2 (mod64- b2 (mod64+ b3 (mod64+ k2 t1)))
            b3 (mod64- b3 (mod64+ k3 15)))
      (setf b3 (ror64 (logxor b3 b0) 5)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 37)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 23)
            b0 (mod64- b0 b1))
      (setf b3 (ror64 (logxor b3 b2) 40)
            b2 (mod64- b2 b3))
      (setf b3 (ror64 (logxor b3 b0) 52)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 57)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 14)
            b0 (mod64- b0 (mod64+ b1 k4))
            b1 (mod64- b1 (mod64+ k0 t2)))
      (setf b3 (ror64 (logxor b3 b2) 16)
            b2 (mod64- b2 (mod64+ b3 (mod64+ k1 t0)))
            b3 (mod64- b3 (mod64+ k2 14)))

      (setf b3 (ror64 (logxor b3 b0) 32)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 32)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 58)
            b0 (mod64- b0 b1))
      (setf b3 (ror64 (logxor b3 b2) 22)
            b2 (mod64- b2 b3))
      (setf b3 (ror64 (logxor b3 b0) 46)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 12)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 25)
            b0 (mod64- b0 (mod64+ b1 k3))
            b1 (mod64- b1 (mod64+ k4 t1)))
      (setf b3 (ror64 (logxor b3 b2) 33)
            b2 (mod64- b2 (mod64+ b3 (mod64+ k0 t2)))
            b3 (mod64- b3 (mod64+ k1 13)))
      (setf b3 (ror64 (logxor b3 b0) 5)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 37)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 23)
            b0 (mod64- b0 b1))
      (setf b3 (ror64 (logxor b3 b2) 40)
            b2 (mod64- b2 b3))
      (setf b3 (ror64 (logxor b3 b0) 52)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 57)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 14)
            b0 (mod64- b0 (mod64+ b1 k2))
            b1 (mod64- b1 (mod64+ k3 t0)))
      (setf b3 (ror64 (logxor b3 b2) 16)
            b2 (mod64- b2 (mod64+ b3 (mod64+ k4 t1)))
            b3 (mod64- b3 (mod64+ k0 12)))

      (setf b3 (ror64 (logxor b3 b0) 32)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 32)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 58)
            b0 (mod64- b0 b1))
      (setf b3 (ror64 (logxor b3 b2) 22)
            b2 (mod64- b2 b3))
      (setf b3 (ror64 (logxor b3 b0) 46)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 12)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 25)
            b0 (mod64- b0 (mod64+ b1 k1))
            b1 (mod64- b1 (mod64+ k2 t2)))
      (setf b3 (ror64 (logxor b3 b2) 33)
            b2 (mod64- b2 (mod64+ b3 (mod64+ k3 t0)))
            b3 (mod64- b3 (mod64+ k4 11)))
      (setf b3 (ror64 (logxor b3 b0) 5)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 37)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 23)
            b0 (mod64- b0 b1))
      (setf b3 (ror64 (logxor b3 b2) 40)
            b2 (mod64- b2 b3))
      (setf b3 (ror64 (logxor b3 b0) 52)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 57)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 14)
            b0 (mod64- b0 (mod64+ b1 k0))
            b1 (mod64- b1 (mod64+ k1 t1)))
      (setf b3 (ror64 (logxor b3 b2) 16)
            b2 (mod64- b2 (mod64+ b3 (mod64+ k2 t2)))
            b3 (mod64- b3 (mod64+ k3 10)))

      (setf b3 (ror64 (logxor b3 b0) 32)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 32)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 58)
            b0 (mod64- b0 b1))
      (setf b3 (ror64 (logxor b3 b2) 22)
            b2 (mod64- b2 b3))
      (setf b3 (ror64 (logxor b3 b0) 46)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 12)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 25)
            b0 (mod64- b0 (mod64+ b1 k4))
            b1 (mod64- b1 (mod64+ k0 t0)))
      (setf b3 (ror64 (logxor b3 b2) 33)
            b2 (mod64- b2 (mod64+ b3 (mod64+ k1 t1)))
            b3 (mod64- b3 (mod64+ k2 9)))
      (setf b3 (ror64 (logxor b3 b0) 5)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 37)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 23)
            b0 (mod64- b0 b1))
      (setf b3 (ror64 (logxor b3 b2) 40)
            b2 (mod64- b2 b3))
      (setf b3 (ror64 (logxor b3 b0) 52)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 57)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 14)
            b0 (mod64- b0 (mod64+ b1 k3))
            b1 (mod64- b1 (mod64+ k4 t2)))
      (setf b3 (ror64 (logxor b3 b2) 16)
            b2 (mod64- b2 (mod64+ b3 (mod64+ k0 t0)))
            b3 (mod64- b3 (mod64+ k1 8)))

      (setf b3 (ror64 (logxor b3 b0) 32)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 32)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 58)
            b0 (mod64- b0 b1))
      (setf b3 (ror64 (logxor b3 b2) 22)
            b2 (mod64- b2 b3))
      (setf b3 (ror64 (logxor b3 b0) 46)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 12)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 25)
            b0 (mod64- b0 (mod64+ b1 k2))
            b1 (mod64- b1 (mod64+ k3 t1)))
      (setf b3 (ror64 (logxor b3 b2) 33)
            b2 (mod64- b2 (mod64+ b3 (mod64+ k4 t2)))
            b3 (mod64- b3 (mod64+ k0 7)))
      (setf b3 (ror64 (logxor b3 b0) 5)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 37)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 23)
            b0 (mod64- b0 b1))
      (setf b3 (ror64 (logxor b3 b2) 40)
            b2 (mod64- b2 b3))
      (setf b3 (ror64 (logxor b3 b0) 52)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 57)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 14)
            b0 (mod64- b0 (mod64+ b1 k1))
            b1 (mod64- b1 (mod64+ k2 t0)))
      (setf b3 (ror64 (logxor b3 b2) 16)
            b2 (mod64- b2 (mod64+ b3 (mod64+ k3 t1)))
            b3 (mod64- b3 (mod64+ k4 6)))

      (setf b3 (ror64 (logxor b3 b0) 32)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 32)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 58)
            b0 (mod64- b0 b1))
      (setf b3 (ror64 (logxor b3 b2) 22)
            b2 (mod64- b2 b3))
      (setf b3 (ror64 (logxor b3 b0) 46)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 12)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 25)
            b0 (mod64- b0 (mod64+ b1 k0))
            b1 (mod64- b1 (mod64+ k1 t2)))
      (setf b3 (ror64 (logxor b3 b2) 33)
            b2 (mod64- b2 (mod64+ b3 (mod64+ k2 t0)))
            b3 (mod64- b3 (mod64+ k3 5)))
      (setf b3 (ror64 (logxor b3 b0) 5)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 37)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 23)
            b0 (mod64- b0 b1))
      (setf b3 (ror64 (logxor b3 b2) 40)
            b2 (mod64- b2 b3))
      (setf b3 (ror64 (logxor b3 b0) 52)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 57)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 14)
            b0 (mod64- b0 (mod64+ b1 k4))
            b1 (mod64- b1 (mod64+ k0 t1)))
      (setf b3 (ror64 (logxor b3 b2) 16)
            b2 (mod64- b2 (mod64+ b3 (mod64+ k1 t2)))
            b3 (mod64- b3 (mod64+ k2 4)))

      (setf b3 (ror64 (logxor b3 b0) 32)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 32)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 58)
            b0 (mod64- b0 b1))
      (setf b3 (ror64 (logxor b3 b2) 22)
            b2 (mod64- b2 b3))
      (setf b3 (ror64 (logxor b3 b0) 46)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 12)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 25)
            b0 (mod64- b0 (mod64+ b1 k3))
            b1 (mod64- b1 (mod64+ k4 t0)))
      (setf b3 (ror64 (logxor b3 b2) 33)
            b2 (mod64- b2 (mod64+ b3 (mod64+ k0 t1)))
            b3 (mod64- b3 (mod64+ k1 3)))
      (setf b3 (ror64 (logxor b3 b0) 5)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 37)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 23)
            b0 (mod64- b0 b1))
      (setf b3 (ror64 (logxor b3 b2) 40)
            b2 (mod64- b2 b3))
      (setf b3 (ror64 (logxor b3 b0) 52)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 57)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 14)
            b0 (mod64- b0 (mod64+ b1 k2))
            b1 (mod64- b1 (mod64+ k3 t2)))
      (setf b3 (ror64 (logxor b3 b2) 16)
            b2 (mod64- b2 (mod64+ b3 (mod64+ k4 t0)))
            b3 (mod64- b3 (mod64+ k0 2)))

      (setf b3 (ror64 (logxor b3 b0) 32)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 32)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 58)
            b0 (mod64- b0 b1))
      (setf b3 (ror64 (logxor b3 b2) 22)
            b2 (mod64- b2 b3))
      (setf b3 (ror64 (logxor b3 b0) 46)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 12)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 25)
            b0 (mod64- b0 (mod64+ b1 k1))
            b1 (mod64- b1 (mod64+ k2 t1)))
      (setf b3 (ror64 (logxor b3 b2) 33)
            b2 (mod64- b2 (mod64+ b3 (mod64+ k3 t2)))
            b3 (mod64- b3 (mod64+ k4 1)))
      (setf b3 (ror64 (logxor b3 b0) 5)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 37)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 23)
            b0 (mod64- b0 b1))
      (setf b3 (ror64 (logxor b3 b2) 40)
            b2 (mod64- b2 b3))
      (setf b3 (ror64 (logxor b3 b0) 52)
            b0 (mod64- b0 b3))
      (setf b1 (ror64 (logxor b1 b2) 57)
            b2 (mod64- b2 b1))
      (setf b1 (ror64 (logxor b1 b0) 14)
            b0 (mod64- b0 (mod64+ b1 k0))
            b1 (mod64- b1 (mod64+ k1 t0)))
      (setf b3 (ror64 (logxor b3 b2) 16)
            b2 (mod64- b2 (mod64+ b3 (mod64+ k2 t1)))
            b3 (mod64- b3 k3))

      (store-words plaintext plaintext-start b0 b1 b2 b3)
      (values))))

(defcipher threefish256
  (:encrypt-function threefish256-encrypt-block)
  (:decrypt-function threefish256-decrypt-block)
  (:block-length 32)
  (:key-length (:fixed 32)))

#|
;;; 512 bit blocks

(define-block-encryptor threefish512 64
  (values))

(define-block-decryptor threefish512 64
  (values))

(defcipher threefish512
  (:encrypt-function threefish512-encrypt-block)
  (:decrypt-function threefish512-decrypt-block)
  (:block-length 64)
  (:key-length (:fixed 64)))


;;; 1024 bit blocks

(define-block-encryptor threefish1024 128
  (values))

(define-block-decryptor threefish1024 128
  (values))

(defcipher threefish1024
  (:encrypt-function threefish1024-encrypt-block)
  (:decrypt-function threefish1024-decrypt-block)
  (:block-length 128)
  (:key-length (:fixed 128)))
|#
